<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>�ȷ���</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-23T12:40:01.175Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lemon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程期末复习</title>
    <link href="http://yoursite.com/2018/11/23/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <id>http://yoursite.com/2018/11/23/软件工程复习资料/</id>
    <published>2018-11-23T11:16:41.000Z</published>
    <updated>2018-11-23T12:40:01.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择填空题"><a class="markdownIt-Anchor" href="#选择填空题"></a> 选择填空题</h2><ul><li>其中，软件开发技术包含了软件开发学、软件工具和软件工程环境;软件工程管理包含了软件管理学、软件经济学和软件度量学。</li></ul><a id="more"></a><ul><li><p>从广义上讲，软件是依据某一特定的观念、原则所形成的某类操作行为和文件。计算机软件，则是指计算机各操作程序、操作程序所使用的数据以及有关的文档资料的集合。</p></li><li><p>从软件的一般属性和本质来看，具有如下几个特点。</p><ol><li>软件是一种逻辑实体，不是具体的物理实体。</li><li>软件的不可见性决定了它的抽象性。</li><li>软件的生产是一种认知过程。</li><li>软件的构造性与演化性。</li><li>软件的非实体性。</li><li>软件的本质是数字存在。</li></ol></li><li><p>复杂性是“软件危机”的本质原因。</p></li><li><p>软件过程则是指将软件工程方法与软件工具相结合，实现合理、及时地进行软件开发的目的，为开发高质量软件规定各项任务的工作步骤。软件工程的根基在于质量关注点。</p></li><li><p>结构化分析使用需求建模方法，以数据流图和控制流图为基础，由系统分析员划分出流变换函数，以得到系统的软件结构，并将其映射为软件功能。其次用状态迁移图来创建行为模型，用数据词典开发成数据模型。（结构化方法的主要思想）</p></li><li><p>瀑布模型强调系统开发应有完整的周期，且必须完整地经历周期中的每一个开发阶段。由于该模式强调系统开发过程需有完整的规划、分析、设计、测试及文件等管理与控制，因此能有效地确保系统品质，它已经成为业界大多数软件开发的标准。</p></li><li><p>软件过程成熟度是指一个特定的软件过程被显式地定义、管理、度量、控制和能行(按步骤执行)的程度。</p></li><li><p>软件能力成熟度模型(CMM)分为5个等级:一级为初始级，二级为可重复级，三级为已定义级，四级为已定量管理级，五级为优化级。</p></li><li><p>项目范围管理是确保项目包括完成项目所需的全部工作，但又只包括必须完成的工作的各个过程。它主要关心的是确定与控制那些应该与不应该包括在项目之内的过程。</p></li><li><p>工作分解结构(WBS)是一个详尽的、层次的(从全面到细节)树形结构，由明确的可提交项目目标与为了完成项目需要执行的任务组成。WBS的目的是识别项目中实际需要完成的工作。</p></li><li><p>甘特图，也称为条状图，是在1917年由亨利·甘特开发的，其内在思想简单，基本是一条线条图，横轴表示时间，纵轴表示活动(项目)，线条表示在整个期间上计划和实际的活动完成情况。</p></li><li><p>LOC指所有的可执行的源代码行数，包括可交付的工作控制语言语句、数据定义、数据类型声明、等价声明、输入/输出格式声明等。</p></li><li><p>Putnam估算模型如下:   <strong>L=P×E<sup>1/3</sup>t<sub>d</sub><sup>4/3</sup></strong>    其中:L为源代码行数(以LOC计)；E为开发与维护的工作量(以人年计)；t<sub>d</sub> 为开发时间(以年计)；P为生产率参数，与开发环境有关。</p></li><li><p>单利终值是本金与未来利息之和，其计算公式为:  <strong>F=P ( 1 + i × t )</strong>  ，P:现值；i:利率；F:终值；t：时间。</p></li><li><p>单利现值是资金现在的价值。单利现值的计算就是确定未来终值的现在价值。单利现值的计算公式为：<strong>P= F / ( 1 + i × t )</strong> 。</p></li><li><p>复利终值是指一定数量的本金在一定的利率下按照复利的方法计算出的若干时期以后的本金和利息。项目成本计算一般采用复利计算。复利终值的计算公式为:  <strong>F = P (1 + i )<sup>n</sup></strong>  假定年利率为 i，如果现在存入P元，则n年后可以得到的钱数F  ，P：现值；i:  利率；F：终值；n：时间(或称期数)</p></li><li><p>复利现值刚好与复利终值计算相反，即把未来价值折合成今天的价值。其计算公式为： <strong>P=F(1+i)<sup>-n</sup></strong>  如果n年后能收入F元钱，那么这些钱的现在的价值是P。</p></li><li><p>净现值的计算公式为： NPV=未来收入的总现值－所有支出的现值</p></li><li><p>项目风险源于任何项目中都存在的不确定性。风险管理是软件项目管理的重要内容。软件风险管理就是通过主动而系统地对项目风险进行全过程的识别、分析和监控，最大限度地降低风险对软件开发的影响。</p></li><li><p>风险揭露(RE)，用公式可以表示为:  <strong>RE=P · C</strong>  RE表示风险揭露；P表示风险发生的不确定性(用概率表示事件发生的可能性)；C表示风险产生时带来的损失程度(例如项目成本)。</p></li><li><p>一般认为软件风险有3种类型，即项目风险、技术风险与商业风险。</p></li><li><p>测试的任务是发现错误，而调试的任务是诊断和改正程序中的错误。</p></li></ul><h2 id="计算题"><a class="markdownIt-Anchor" href="#计算题"></a> 计算题</h2><h3 id="第四章-软件项目估算"><a class="markdownIt-Anchor" href="#第四章-软件项目估算"></a> 第四章 软件项目估算</h3><ul><li><p>19、已知有一个典型的软件项目的记录，开发人员M = 3人，其代码码行数= 12.1KLOC,工作量E=24PM,成本S=168000美元。试计算开发该软件项目的生产率P和每代码行平均成本C。(同书P84 例 4-1)</p><blockquote><p>P=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>L</mi></mrow><mrow><mi>E</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{L}{E}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05764em;">E</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">L</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mi>K</mi></mrow><mrow><mn>2</mn><mn>4</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{12.1K}{24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathrm">4</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.07153em;">K</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>=504 LOC/PMC=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>S</mi></mrow><mrow><mi>L</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{S}{L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.872331em;"></span><span class="strut bottom" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">L</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">S</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mn>6</mn><mn>8</mn><mn>0</mn><mn>0</mn></mrow><mrow><mn>1</mn><mn>2</mn><mi mathvariant="normal">.</mi><mn>1</mn><mi>K</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{16800}{12.1K}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">1</span><span class="mord mathit" style="margin-right:0.07153em;">K</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span><span class="mord mathrm">6</span><span class="mord mathrm">8</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>=139 P/LOC</p></blockquote></li><li><p>20、使用COCOMO Ⅱ模型来估算一个软件系统所需的工作量，该系统产生12个屏幕、10个报表,需要大约80个软件构件。假定该软件具有“中等”复杂度和“正常开发者环境”成熟度,复用的百分比为40%。试完成以下计算:<br>(1)计算项目的NOP.<br>(2)进行工作量估算(人月)。<br>(3) 假设软件人员劳动力平均价格是每月5000元人民币，求每个NOP的成本。</p><blockquote><p>(1) NOP=（12×2+10×5+80×6）×0.6=332.4</p><p>(2) PM = 332.4/13=25.6</p><p>(3) \frac{PM×5000}{NOP} = \frac{25.6×5000}{332.4}=384.6</p></blockquote></li><li><p>21、根据下面的信息域特性值:</p></li></ul><table><thead><tr><th style="text-align:center">外部输入数</th><th style="text-align:center">外部输出数</th><th style="text-align:center">外部查询数</th><th style="text-align:center">内部接口数</th><th style="text-align:center">外部文件数</th></tr></thead><tbody><tr><td style="text-align:center">10</td><td style="text-align:center">12</td><td style="text-align:center">15</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr></tbody></table><p>假设各项加权因子均为5，不考虑复杂度调整值(即: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="base textstyle uncramped"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span></span></span></span>F<sub>i</sub> =0)，试完成以下计算:<br>(1)计算项目的功能点的总计数值FP<br>(2)设平均生产率为10FP/pm,软件人员劳动力平均价格是每月500元人民币，求每个FP的成本。<br>(3)根据FP值计算总的项目成本，并进行工作量估算(人月)。</p><blockquote><p>(1) FP = (10+12+15+8+8)×5×0.65 = 172.25</p><p>(2) 5000/10 = 500 元/FP</p><p>(3) 500×172.25 = 8612.5172.25/10 = 17.225</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选择填空题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#选择填空题&quot;&gt;&lt;/a&gt; 选择填空题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;其中，软件开发技术包含了软件开发学、软件工具和软件工程环境;软件工程管理包含了软件管理学、软件经济学和软件度量学。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="复习" scheme="http://yoursite.com/categories/%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="复习" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络整理(持续更新中)</title>
    <link href="http://yoursite.com/2018/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/10/17/计算机网络/</id>
    <published>2018-10-17T11:16:41.000Z</published>
    <updated>2018-10-17T12:35:12.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-概述"><a class="markdownIt-Anchor" href="#第一章-概述"></a> 第一章 概述</h2><blockquote><p>（1）因特网的边缘部分和核心部分的作用，这里面包含分组交换的概念。<br>（2）计算机网络的一些性能指标。<br>（3）计算机网络分层次的体系结构，包含协议和服务的概念。</p></blockquote><hr><a id="more"></a><ul><li><p>21世纪的一些重要特征就是<strong>数字化、网络化</strong>和<strong>信息化</strong>，它是一个<strong>以网络为核心的信息时代</strong>。</p></li><li><p>“三网”：<strong>电信网络、有线电视网络</strong>和<strong>计算机网络</strong>。</p></li><li><p>电信网络和有线电视网络都逐渐融入了现代计算机网络的技术，这就产生了**“网络融合”**的概念。</p></li><li><p>计算机网络向用户提供的最重要的功能有两个，即：</p><ul><li><strong>连通性</strong>：使上网用户之间都可以交换信息，好像这些用户的计算机都可以彼此直接连通一样。</li><li><strong>共享</strong>：就是资源共享，资源共享的含义是多方面的。可以是信息共享、软件共享，也可以是硬件共享。</li></ul></li><li><p>起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网。</p></li><li><p><strong>网络</strong>(network)由若干<strong>结点</strong>和连接这些结点的链路组成。网络中的结点可以是计算机、集线器、交换机或路由器等。</p></li><li><p><strong>网络把许多计算机连接在一起，而因特网则把许多网络连接在一起。</strong></p></li><li><p>因特网发展的三个阶段</p><ul><li>第一阶段是从单个网络ARPANET向互联网发展的过程。<ul><li>以小写字母 <strong>i</strong> 开始的 <strong>internet</strong> （互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。</li><li>以大写字母 <strong>I</strong> 开始的 <strong>Internet</strong> （因特网）则是一个专有名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。</li></ul></li><li>第二阶段的特点是建成了<strong>三级结构的因特网</strong>。<ul><li>三级计算机网络，分为<strong>主干网</strong>、<strong>地区网</strong>和<strong>校园网</strong>（或<strong>企业网</strong>）。</li></ul></li><li>第三阶段的特点是逐渐形成了<strong>多层次 ISP 结构的因特网</strong><ul><li><strong>因特网服务提供者ISP（Internet Service Provider）</strong>，在许多情况下，其就是一个进行商业活动的公司，因此 ISP 又常译为<strong>因特网服务提供商</strong>，例如中国电信、中国联通和中国移动就是我国最有名的ISP。</li><li>IP 地址的管理机构不会把一个单个的IP地址分配给单个用户（不“零售”IP地址），而是把一批IP地址有偿租赁给经审查合格的ISP（只“批发”IP地址）。</li></ul></li></ul></li><li><p>因特网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。这样就使因特网上的数据流量分布更加合理，同时也减少了分组转发的迟延时间，降低了分组转发的费用。</p></li><li><p>制定因特网的正式标准要经过以下的四个阶段【RFC 2026】：</p><ol><li>因特网草案——在这个阶段还不是RFC文档。</li><li>建议标准——从这个阶段开始就成为RFC文档。</li><li>草案标准。</li><li>因特网标准。</li></ol></li><li><p>因特网的组成</p><ul><li><p><strong>边缘部分</strong>：由所有连接在因特网上的主机组成。这部分是<strong>用户直接使用的</strong>，用来进行通信（传输数据、音频或视频）和资源共享。</p><blockquote><p>我们说“主机A和主机B进行通信”，这也就是指：<strong>”主机A的某个进程和主机B上的另一个进程进行通信</strong>。这种比较严密的说法通常可以简称为**“计算机之间的通信”**。在网络边缘的端系统之间的通信方式通常可划分为两大类：<strong>客户-服务器方式（C/S 方式）<strong>和</strong>对等方式（P2P方式）</strong></p></blockquote><ul><li><strong>客户-服务器方式</strong>：客户是服务请求方，服务器是服务提供方。<strong>客户和服务器本来都指的是计算机进程（软件）</strong>。</li><li><strong>对等连接方式</strong>：两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。对等连接工作方式可支持大量对等用户。</li></ul></li><li><p><strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是<strong>为边缘部分提供服务的</strong>（提供连通性和交换）。</p><blockquote><p>是因特网中最复杂的部分，因为网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一台主机都能够向其他主机通信。在网络核心部分起特殊作用的是<strong>路由器</strong>，它是一种专用计算机（但不是主机）。<strong>路由器是实现分组交换</strong>的关键构件，其任务是<strong>转发收到的分组</strong>，这是网络核心部分最重要的功能。</p></blockquote><ul><li><p>电路交换的主要特点</p><blockquote><p>经过**”建立连接**（占用通信资源）–&gt; <strong>通话</strong>（一直占用通信资源） --&gt; <strong>释放连接</strong>（归还通信资源）“三个步骤的交换方式称为<strong>电路交换</strong>。使用电路交换来传送计算机数据时，其<strong>线路的传输效率往往很低</strong>，被用户占用的通信线路资源在绝大部分时间里都是空闲的。</p></blockquote></li><li><p>分组交换的主要特点</p><blockquote><p>采用<strong>存储转发</strong>技术，通常我们把要发送的整块数据称为一个<strong>报文</strong>。把较长的报文划分成一个个更小的等长数据段，在每一个数据段前面，加上一些必要的控制信息组成的<strong>首部</strong>后，就构成了一个<strong>分组</strong>（又称“<strong>包</strong>”，分组的首部也可称为“<strong>包头</strong>”），分组的首部包含了诸如目的地址和源地址等重要控制信息。</p></blockquote><ul><li><p>为了提高分组交换网的可靠性，因特网的核心部分常采用网状拓扑结构，使得当发生网络拥塞或少数结点、链路出现故障时，路由器可灵活地改变转发路由而不至于引起通信的中断或全网的瘫痪。</p></li><li><p>分组交换的优点</p></li></ul></li></ul></li></ul></li></ul><table><thead><tr><th>优点</th><th>所采用的手段</th></tr></thead><tbody><tr><td>高效</td><td>在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用</td></tr><tr><td>灵活</td><td>为每一个分组独立地选择转发路由</td></tr><tr><td>迅速</td><td>以分组作为传送单位，可以不先建立连接就能向其他主机发送分组</td></tr><tr><td>可靠</td><td>保证可靠性的网络协议：分布式多路由的分组交换网，使网络有很好的生存性</td></tr></tbody></table><ul><li><p>位于网络边缘的主机和位于网络核心部分的路由器都是计算机，不一样的是，<strong>主机是为用户进行信息处理的</strong>，并且可以和其他主机通过网络交换信息。<strong>路由器则是用来转发分组的，即进行分组交换的。</strong></p></li><li><p><strong>电路交换</strong>——整个报文的比特流连续地从源点直达终点，好像在一个管道中传送。</p><p><strong>报文交换</strong>——整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</p><p><strong>分组交换</strong>——单个分组（这只是整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。</p></li><li><p>计算机网络</p><blockquote><p><strong>一些互相连接的、自治的计算机的集合</strong></p></blockquote><ul><li>按网络的作用范围进行分类：<strong>广域网 WAN、城域网 MAN、局域网 LAN、个人局域网 PAN</strong></li><li>按网络的使用者进行分类：<strong>公用网、专用网</strong></li></ul></li><li><p>计算机网络的性能指标</p><ul><li><strong>速率</strong>：</li></ul></li></ul><hr><p><strong>未完待续~~~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一章-概述&quot;&gt;&lt;/a&gt; 第一章 概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;（1）因特网的边缘部分和核心部分的作用，这里面包含分组交换的概念。&lt;br&gt;
（2）计算机网络的一些性能指标。&lt;br&gt;
（3）计算机网络分层次的体系结构，包含协议和服务的概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET期末复习</title>
    <link href="http://yoursite.com/2018/06/28/ASP.NET%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/28/ASP.NET期末复习/</id>
    <published>2018-06-28T01:16:41.000Z</published>
    <updated>2018-10-17T11:59:54.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-net选择填空复习内容"><a class="markdownIt-Anchor" href="#一-net选择填空复习内容"></a> 一、.NET选择填空复习内容</h2><ul><li>Visual Studio是一套完整的开发工具集，<a href="http://xn--ASP-xi9dw50gnlz0ba.NET" target="_blank" rel="noopener">用于生成ASP.NET</a> Web 应用程序、桌面应用程序和移动应用程序等。在Visual Sudio中，Visual Basic、Visual C++、Visual C#和Visual J#等语言都使用相同的集成开发环境(IDE)，利用此IDE可以共享工具且有助于创建混合语言解决方案。</li></ul><a id="more"></a><ul><li><p>HTML 是英文HyperText Markup Language 的缩写，中文的意思是超文本标记语言。它是通过嵌入代码或标记的方式来表明文本格式的国际标准。用它编写的文件扩展名是 .html或 .htm,这种网页文件的内容是静态的，而且无法与后台数据库结合使用。</p></li><li><p>ASP.NET并不是ASP的简单升级，<a href="http://xn--6kq92uzzlxgz.NET" target="_blank" rel="noopener">而是基于.NET</a> Framework技术的新一代Web应用程序开发系统，可以在Web服务器上建立的功能强大的Web应用程序。</p></li><li><p>域名通常可以分为国际顶级域名和国内域名两种情形。国际顶级域名以 .com、.org、 .net、 .edu等为后缀，.com表示商业机构，.net 表示网络服务机构，.gov 表示政府机构，.edu 表示教育机构。国内域名是在国际顶级域名的后面添加代表国家的后缀所构成的，如 .cn 代表中国、.us 代表美园、.uk代表英国。</p></li><li><p>ASP.NET工程通常包含两个目录，即Projects和WebSites。Projects 目录下保存实例的工程目录，WebSites 目录下保存实例的网站代码。</p></li><li><p>解决方案是个容器，可以包含多个工程，用于管理Visual Studio配置、生成和部署相关项目集的方式。</p></li><li><p>C#项目文件的扩展名为 .csproj，用于管理应用程序所需的引用、数据连接、文件夹和文件的信息。</p></li><li><p>.NET Framework 具有两个主要组件，即公共语言运行库(CLR)<a href="http://xn--0tr.NET" target="_blank" rel="noopener">和.NET</a> Framework类库。<a href="http://xn--55qk002hwmhsp8bzecuweqrk.NET" target="_blank" rel="noopener">公共语言运行库是.NET</a> Framework的基础。可以将运行库看作一个在执行时管理代码的代理，它提供内存管理、线程管理和远程处理等核心服务，并且还强制实施严格的类型安全和代码准确性检查。</p></li><li><p>值类型的变量用于直接存储变量的值。例如，一个整数类型int占用4个字节的内存空间，其中用于保存一个整数值。</p></li><li><p>引用类型与值类型的最大区别在于，引用类型变量不直接存储所包含的值，而是指向它所要存储的值。</p></li><li><p>委托(delegate) 相当于C<ins>中的函数指针，但是委托是类型安全和可靠的，它避免了C</ins>中由于没有释放指针而导致的资源泄露现象，也不会因为指针指向不正确的地址而产生异常。</p></li><li><p><a href="http://xn--object-1l1kh18gz65b.NET" target="_blank" rel="noopener">object类型是.NET</a> Framework中System.Object的别名。在C#的统一类型系统中，所有类型都是直接或间接从Object继承的 。</p></li><li><p>常量具有固定的值， 在程序中常量的值不能发生改变。在C#语言中， 可以使用const关键字来声明常量 。</p></li><li><p>多态性指相同的操作可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</p></li><li><p><a href="http://xn--3ds.NET" target="_blank" rel="noopener">在.NET</a> FrameWork中,Page类是ASP.NET应用程序在.aspx文件中构建所有对象的基类 。</p></li><li><p>Label 控件又称标签控件，主要用来显示文本。</p></li><li><p>TextBox控件主要用来显示一个文本框，供用户输入文本。该控件有3种呈现方式：单行文本输人、多行文本输人和密码输入。</p></li><li><p>Image 控件又称为图像控件，与HTML语言中Img标识符相似，主要用来显示用户图像 。</p></li><li><p>CheckBox控件是一个方型多选(复选框)控件，多个CheckBox 控件可以组合成一个CheckBoxList控件，在效果上是一致的 。</p></li><li><p>Calendar 控件是日历专用控件，它提供了数十种控件日历外观属性。</p></li><li><p>Panel控件和PlaceHolder控件一样，可以作为其他控件的容器。可以对Panel控件中包含的所有控件进行统一配置，例如同时控制多个子控件的可见性和可用性 。</p></li><li><p>RequireFieldValidator 控件又称非空验证控件，常用于对TextBox控件进行非空验证。</p></li><li><p>RegularExpressionValidator控件又称为正则表达式验证控件，它的验证功能比其他验证控件更强大，用户可以定义或书写自己的验证表达式。</p></li><li><p>CompareValidator控件称为比较验证控件，使用CompareValidator控件可以将输人控件的值与常数值或其他控件的值相比较，以确定两个值的关系(大于、等于、小于等) 。</p></li><li><p>Response对象用于响应客户端的请求，将信息传递给用户。可以使用Response对象向网页中输出文本或者编写Cookie等。</p></li><li><p>一个ASP.NET应用程序可以拥有多个配置文件，而且配置文件名称都是Web.config。<a href="http://xn--ASP-fk9d8mld30xqoehoj9y2bot6aqp3acv8b3ie.NET" target="_blank" rel="noopener">这些配置文件可以出现在ASP.NET</a> Web应用程序服务器上的多个目录中。每个Web.config文件都将配置信息应用于它自己的目录和它下面的所有子目录。子目录中的配置文件可以提供除从父目录继承的配置信息以外的配置信息，子目录配置设置可以重写或修改父目录中定义的设置。</p></li><li><p>服务器的配置信息保存在名为 machine.config 的配置文件中，它一般保存在”%systemroot%\<a href="http://Microsoft.NET" target="_blank" rel="noopener">Microsoft.NET</a>\Framework\V版本号\CONFIG\”目录下。</p></li><li><p>那么如何在ASP.NET网页中定义和使用全局变量呢? Application 对象提供了这种机制。Application对象可以提供给多个客户端用户共享信息，所有的客户端用户都可以访问Application对象中保存的数据。</p></li><li><p>Global.asax文件是一个可选文件，用户可以在该文件中指定某个事件发生时执行的代码。该文件必须存放在应用程序的根目录中，而且每个应用程序只能有一个Global.asax文件。</p></li><li><p>Session的中文含义为会话，Session 对象用于保存用户从登录网页到离开这段时间内的相关信息，如用户名、密码、IP地址、访问时间等。</p></li><li><p>ViewState对象通常用于在整个往返过程期间保持网页上的窗体数据。当网页提交服务器后，ViewState对象不再保存原先的数据，系统将自动清空ViewState对象中的数据。</p></li><li><p>AJAX全称为 Asynchronous JavaScript and XML (异步JavaScript和XML)，是一种创建交互式网页应用的网页开发技术。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-net选择填空复习内容&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-net选择填空复习内容&quot;&gt;&lt;/a&gt; 一、.NET选择填空复习内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio是一套完整的开发工具集，&lt;a href=&quot;http://xn--ASP-xi9dw50gnlz0ba.NET&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用于生成ASP.NET&lt;/a&gt; Web 应用程序、桌面应用程序和移动应用程序等。在Visual Sudio中，Visual Basic、Visual C++、Visual C#和Visual J#等语言都使用相同的集成开发环境(IDE)，利用此IDE可以共享工具且有助于创建混合语言解决方案。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="复习总结" scheme="http://yoursite.com/categories/%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term=".NET" scheme="http://yoursite.com/tags/NET/"/>
    
      <category term="复习" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库期末复习</title>
    <link href="http://yoursite.com/2018/06/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/24/数据库期末复习/</id>
    <published>2018-06-24T04:50:41.000Z</published>
    <updated>2018-06-24T04:59:44.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-简答题"><a class="markdownIt-Anchor" href="#一-简答题"></a> 一. 简答题</h2><hr><h3 id="简答题一"><a class="markdownIt-Anchor" href="#简答题一"></a> 简答题一</h3><h4 id="1-简述数据库概念-数据库系统组成及数据库系统特点"><a class="markdownIt-Anchor" href="#1-简述数据库概念-数据库系统组成及数据库系统特点"></a> 1. 简述数据库概念、数据库系统组成及数据库系统特点</h4><ul><li>**数据库概念：**数据库是长期储存在计算机内的、有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。</li></ul><a id="more"></a><ul><li><p>**数据库系统组成：**数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DataBase Administrator，DBA）组成的存储、管理、处理和维护数据的系统。</p></li><li><p>**数据库系统特点：**数据库系统主要有以下4方面的特点。</p><p><strong>①数据结构化。</strong><br><strong>②数据的共享性高,冗余度低,易扩充。</strong><br><strong>③数据独立性高。数据独立性包括数据的物理独立性和数据的逻辑独立性。</strong><br><strong>④数据由DBMS统一管理和控制。</strong></p></li></ul><h4 id="2-简述数据库系统设计步骤及每个步骤的主要任务与文档"><a class="markdownIt-Anchor" href="#2-简述数据库系统设计步骤及每个步骤的主要任务与文档"></a> 2. 简述数据库系统设计步骤及每个步骤的主要任务与文档</h4><ol><li>**需求分析：**准确了解与分析用户需求（包括数据与处理）。</li><li>**概念结构设计：**通过对用户需求进行综合、归纳与抽象，形成一个独立于具体 DBMS 的概念模型。</li><li>**逻辑结构设计：**将概念结构转换为某个 DBMS 所支持的数据模型，并对其进行优化。</li><li>**数据库物理设计：**为逻辑数据模型选取一个最适合应用环境的物理结构（包括存储结构和存取方法）。</li><li>**数据库实施：**设计人员运用 DBMS 提供的数据语言、工具及宿主语言，根据逻辑设计和物理设计的结果建立数据库，编制与调试应用程序，组织数据入库，并进行试运行。</li><li>**数据库运行和维护：**在数据库系统运行过程中对其进行评价、调整与修改。</li></ol><h4 id="3-视图概念及其意义"><a class="markdownIt-Anchor" href="#3-视图概念及其意义"></a> 3. 视图概念及其意义</h4><ul><li>概念：视图是从一个或多个基本表（或视图）导出的表。它与基本表不同，是一个虚表。具有普通表的结构，但是不实现数据存储。</li><li>意义：<ul><li>能够简化用户的操作。</li><li>使用户能以多种角度看待同一数据。</li><li>对重构数据库提供了一定程序的逻辑独立性。</li><li>能够对机密数据提供安全保护。</li><li>适当利用视图可以更清晰地表达查询。</li></ul></li></ul><h4 id="4-安全性概念数据库系统常采取的安全性措施"><a class="markdownIt-Anchor" href="#4-安全性概念数据库系统常采取的安全性措施"></a> 4. 安全性概念，数据库系统常采取的安全性措施</h4><ul><li>安全性概念：数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。</li><li>安全性措施：<ol><li><strong>用户标识和鉴别</strong>：该方法由系统提供一定的方式让用户标识自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通过鉴定后才提供系统的使用权。</li><li><strong>存取控制</strong>：通过用户权限定义和合法权检查确保只有合法权限的用户访问数据库，所有未被授权的人员无法存取数据。例如CZ 级中的自主存取控制( DAC ) , Bl 级中的强制存取控制（MAC ）。</li><li><strong>视图机制</strong>：为不同的用户定义视图，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定程度的安全保护。</li><li><strong>审计</strong>：建立审计日志，把用户对数据库的所有操作自动记录下来放入审计日志中，DBA 可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。</li><li><strong>数据加密</strong>：对存储和传输的数据进行加密处理，从而使得不知道解密算法的人无法获知数据的内容。</li></ol></li></ul><h4 id="5-什么是sql-注入入侵解决方案有哪些-来自百度百科"><a class="markdownIt-Anchor" href="#5-什么是sql-注入入侵解决方案有哪些-来自百度百科"></a> 5. 什么是SQL 注入入侵，解决方案有哪些 (来自百度百科)</h4><ul><li>SQL 注入入侵：所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li><li>解决方案：<strong>输入验证</strong> 、<strong>错误消息处理</strong> 、<strong>加密处理</strong> 、<strong>存储过程来执行所有的查询</strong> 、<strong>使用专业的漏洞扫描工具</strong> 、<strong>确保数据库安全</strong> 、<strong>安全审评</strong> 。</li></ul><h4 id="6-数据库的完整性概念说说你所了解的server所提供的完整性解决方案"><a class="markdownIt-Anchor" href="#6-数据库的完整性概念说说你所了解的server所提供的完整性解决方案"></a> 6. 数据库的完整性概念，说说你所了解的SERVER所提供的完整性解决方案</h4><ul><li>概念：数据库的完整性是指数据的正确性和相容性。</li><li>SQL Server 所提供的完整性解决方案：<strong>实体完整性</strong>、<strong>参照完整性</strong>、<strong>用户自定义的完整性</strong>、<strong>完整性约束命名子句</strong>、<strong>域中的完整性限制</strong>、<s><strong>断言</strong></s>(SQL Server无断言)、<strong>触发器</strong></li></ul><h4 id="7-简述什么是数据库的逻辑独立性与物理独立性数据库系统采用什么技术手段保证它"><a class="markdownIt-Anchor" href="#7-简述什么是数据库的逻辑独立性与物理独立性数据库系统采用什么技术手段保证它"></a> 7. 简述什么是数据库的逻辑独立性与物理独立性，数据库系统采用什么技术手段保证它</h4><ul><li>逻辑独立性：指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。</li><li>物理独立性：指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。</li><li>数据库系统采用什么技术手段保证它：三级模式（模式、外模式、内模式）二级映像（外模式/模式映像、模式/内模式映像）</li></ul><h4 id="8-关系的形式化定义与数学定义分别是什么关系具有6个基本特征是什么什么是关系模式"><a class="markdownIt-Anchor" href="#8-关系的形式化定义与数学定义分别是什么关系具有6个基本特征是什么什么是关系模式"></a> 8. 关系的形式化定义与数学定义分别是什么？关系具有6个基本特征是什么？什么是关系模式</h4><ul><li>关系的形式化定义：</li><li>关系的数学定义：</li><li>关系的6个基本特征：<ul><li>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域。</li><li>不同的列可出自同一个域，称其中的每一个列为一个属性，不同的属相要给予不同的属性名</li><li>列的顺序无所谓，即列的次序可以任意交换。</li><li>任意两个元组的候选码不能取相同的值</li><li>行的顺序无所谓，即行的次序可以任意交换。</li><li>分量必须取原子值，即每一个分量都必须是不可分的数据项。</li></ul></li><li>关系模式：关系的描述称为关系模式，它可以形式化地表示为 <strong>R( U，D，DOM，F )</strong>，其中R为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。</li></ul><h3 id="简答题二"><a class="markdownIt-Anchor" href="#简答题二"></a> 简答题二</h3><h4 id="1-有二个事务如下所示"><a class="markdownIt-Anchor" href="#1-有二个事务如下所示"></a> 1. 有二个事务如下所示：</h4><p>T1：A=A*B+C；</p><p>T2：B=B+A；</p><p>试设计一个符合两段锁协议且不产生死锁的可串行化调度，设A初值为2，B初值为5，C初值为1</p><p>你的设计是否冲突可串行化？</p><h4 id="2-事务概念事务的四个性质分别是什么名称与内容"><a class="markdownIt-Anchor" href="#2-事务概念事务的四个性质分别是什么名称与内容"></a> 2. 事务概念，事务的四个性质分别是什么名称与内容。</h4><ul><li>概念：事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位。</li><li>事务的4个性质：原子性（Atomicity ）、一致性（consistency ）、隔离性( Isolation ）、持续性（Durability ）。这4 个特性也简称为ACID 特性。<ul><li>原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</li><li>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</li><li>隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持续性：持续性也称永久性（Perfnanence ) ，指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</li></ul></li></ul><h4 id="3-例举丢失更新如何解决丢失更新对应的封锁协议sql-server对应的隔离级别是什么"><a class="markdownIt-Anchor" href="#3-例举丢失更新如何解决丢失更新对应的封锁协议sql-server对应的隔离级别是什么"></a> 3. 例举丢失更新，如何解决丢失更新，对应的封锁协议，SQL SERVER对应的隔离级别是什么</h4><ul><li>丢失更新：两个事务T1和T2读入同一数据并修改，T2提交的结果破坏了T1提交的结果，导致T1的修改被丢失。</li><li>对应的封锁协议：一级封锁协议。</li><li>对应的隔离级别：未提交读READ UNCOMMITTED，SQL：set transaction isolation level read uncommitted</li></ul><h4 id="4-例举读脏数据如何解决脏数据对应的封锁协议sql-server对应的隔离级别是什么"><a class="markdownIt-Anchor" href="#4-例举读脏数据如何解决脏数据对应的封锁协议sql-server对应的隔离级别是什么"></a> 4. 例举读脏数据，如何解决脏数据，对应的封锁协议，SQL SERVER对应的隔离级别是什么</h4><ul><li>读脏数据：指事务T1修改某一数据并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤销，这时被T1修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据就为读脏数据。</li><li>对应的封锁协议：二级封锁协议。</li><li>对应的隔离级别：提交读（READ COMMITTED），SQL：set transaction isolation level read committed</li></ul><h4 id="5-例举不可重复读如何解决不可重复读对应封锁协议sql-server对应的隔离级别是什么"><a class="markdownIt-Anchor" href="#5-例举不可重复读如何解决不可重复读对应封锁协议sql-server对应的隔离级别是什么"></a> 5. 例举不可重复读，如何解决不可重复读，对应封锁协议，SQL SERVER对应的隔离级别是什么</h4><ul><li><p>不可重复读：指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。</p><p>事务T1读取某一数据后，事务T2对其进行了修改，当事务T1再次读该数据时，得到与前一次不同的值。</p></li><li><p>对应的封锁协议：三级封锁协议。</p></li><li><p>对应的隔离级别：不一致的读REPEATABLE READ，SQL：set transaction isolation level repeatable read</p></li></ul><h4 id="6-例举幻读如何解决幻读对应的封锁协议sql-server对应的隔离级别是什么"><a class="markdownIt-Anchor" href="#6-例举幻读如何解决幻读对应的封锁协议sql-server对应的隔离级别是什么"></a> 6. 例举幻读，如何解决幻读，对应的封锁协议，SQL SERVER对应的隔离级别是什么</h4><ul><li><p>幻读：</p><ol><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录神秘地消失了</li><li>事务T1按一定条件从数据库中读取了某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。</li></ol></li><li><p>对应的封锁协议：三级封锁协议。</p></li><li><p>对应的隔离级别：幻读（SERIALIZABLE），SQL：set transaction isolation level serializable</p></li></ul><h4 id="7-例举什么是死锁常用的死锁有哪些解决方案简述你所了解的sql-server对死锁的解决方案"><a class="markdownIt-Anchor" href="#7-例举什么是死锁常用的死锁有哪些解决方案简述你所了解的sql-server对死锁的解决方案"></a> 7. 例举什么是死锁，常用的死锁有哪些解决方案，简述你所了解的SQL SERVER对死锁的解决方案</h4><ul><li>死锁：如果事务T1封锁了数据R1,T2封锁了数据R2,然后T1又请求封锁R2,因T2已封锁了R2,于是T1等待T2释放R2上的锁。接着T2又申请封锁R1,因T1已封锁了R1,T2也只能等待T1释放R1上的锁。如下图所示。这样就出现了T1在等待T2,而T2又在等待T1的局面,T1和T2两个事务永远不能结束,形成死锁。</li></ul><table><thead><tr><th style="text-align:center">T1</th><th style="text-align:center">T2</th></tr></thead><tbody><tr><td style="text-align:center">Lock R1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Lock R2</td></tr><tr><td style="text-align:center">Lock R2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">等待</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">等待</td><td style="text-align:center">Lock R1</td></tr><tr><td style="text-align:center">等待</td><td style="text-align:center">等待</td></tr></tbody></table><ul><li><p>防止死锁的发生其实就是要破坏产生死锁的条件。预防死锁通常有两种方法:</p><p>①一次封锁法：要求每个事务必须一次将所有要使用的数据全部加锁,否则就不能继续执行。</p><p>②顺序封锁法 ：预先对数据对象规定一个封锁顺序,所有事务都按这个顺序实行封锁。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-简答题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-简答题&quot;&gt;&lt;/a&gt; 一. 简答题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&quot;简答题一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简答题一&quot;&gt;&lt;/a&gt; 简答题一&lt;/h3&gt;
&lt;h4 id=&quot;1-简述数据库概念-数据库系统组成及数据库系统特点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简述数据库概念-数据库系统组成及数据库系统特点&quot;&gt;&lt;/a&gt; 1. 简述数据库概念、数据库系统组成及数据库系统特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;**数据库概念：**数据库是长期储存在计算机内的、有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="复习总结" scheme="http://yoursite.com/categories/%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="复习" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>操作系统期末复习</title>
    <link href="http://yoursite.com/2018/06/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/20/操作系统复习/</id>
    <published>2018-06-20T02:39:41.000Z</published>
    <updated>2018-06-21T14:14:00.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简答题"><a class="markdownIt-Anchor" href="#简答题"></a> 简答题</h1><h2 id="1操作系统的主要功能5点"><a class="markdownIt-Anchor" href="#1操作系统的主要功能5点"></a> 1.操作系统的主要功能（5点）</h2><ul><li><strong>根据课本：1. 进程、线程与作业，2. 中断与处理器调度，2. 互斥、同步与通信，3. 死锁与饥饿，4.存储管理，5. 文件系统，6.设备与输入输出管理</strong></li><li><strong>根据百度：处理器管理、存储器管理、设备管理、文件管理、作业管理（来自百度百科）</strong></li></ul><a id="more"></a><h2 id="2什么是死锁p146-死锁产生的必要条件有哪些p147"><a class="markdownIt-Anchor" href="#2什么是死锁p146-死锁产生的必要条件有哪些p147"></a> 2.什么是死锁？(P146) 死锁产生的必要条件有哪些?（P147）</h2><ul><li><strong>死锁：一组进程中的每个进程均等待此组进程中其他进程所占有的、因而永远无法继续向前推进，这种现象称为进程死锁，简称死锁。</strong></li><li><strong>死锁的必要条件：1. 资源独占，2. 不可剥夺，3. 保持申请，4.循环等待(注意: 当且仅当4个条件同时满足时，死锁才会发生)</strong></li></ul><h2 id="3-进程有哪几种状态画出进程的状态转换图p28~p29图2-3"><a class="markdownIt-Anchor" href="#3-进程有哪几种状态画出进程的状态转换图p28~p29图2-3"></a> 3. 进程有哪几种状态，画出进程的状态转换图（P28~P29图2-3）</h2><ul><li><p><strong>3种状态：运行态，就绪态，等待态</strong></p></li><li><p><strong>转换图如下</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzcyIe.png" alt="图2-3 进程间的基本状态转换关系"></p></li></ul><h2 id="4-进程与程序的联系与区别p34-229"><a class="markdownIt-Anchor" href="#4-进程与程序的联系与区别p34-229"></a> 4. 进程与程序的联系与区别（P34 2.2.9）</h2><ul><li><strong>联系</strong><ul><li><strong>程序是构成进程的组成部分之一，一个进程存在的目的就是执行其所对应的程序。如果没有程序，进程就失去了其存在的意义。</strong></li></ul></li><li><strong>区别</strong><ol><li><strong>程序是静态的，而进程则是动态的。</strong></li><li><strong>程序可以写在纸上或在某种存储介质上长期保存，而进程具有生命周期，创建后存在，撤销后消亡。</strong></li><li><strong>一个程序可以对应多个进程，但是一个进程只能对用一个程序。</strong></li></ol></li></ul><h2 id="5-段式存储与页式存储的管理的区别p187"><a class="markdownIt-Anchor" href="#5-段式存储与页式存储的管理的区别p187"></a> 5. 段式存储与页式存储的管理的区别（P187）</h2><ul><li><strong>分页和分段都采用离散分配方式，但两者有显著的差别。</strong><br><strong>(1) 页是信息的物理单位．分页是系统的需要．是为了提高内存的利用率；段是信息的逻<br>辑单位．目的在于更好地满足用户的需要</strong><br><strong>(2) 页的大小固定。由系统确定．一个系统只能有一种大小的页面：段的长度不固定。决定于用户的程序。</strong><br><strong>(3) 分页的作业地址空间是—维的．单一的线性地址空间；分段的作业地址空间是二维的。—个地址包括段号和段内地址。</strong></li></ul><hr><h1 id="计算题"><a class="markdownIt-Anchor" href="#计算题"></a> 计算题</h1><h2 id="1-处理机调度算法fcfs-sjf-hrn-rrp61-p66"><a class="markdownIt-Anchor" href="#1-处理机调度算法fcfs-sjf-hrn-rrp61-p66"></a> 1. 处理机调度算法(FCFS、SJF、HRN、RR)（P61 - P66）</h2><blockquote><p>掌握四个算法的平均周转时间与平均带权周转时间的计算，要画甘特图</p></blockquote><ul><li><p>**先到先服务算法(First-Come First Served,FCFS)——作业/进程 **</p><p>**按照进程申请CPU的次序，即进入就绪状态的次序来调度。<u>非抢占型</u>，有利于CPU繁忙型作业，对I/O繁忙型作业不利。 **</p><p><strong>优点：公平，不会出现饿死的情况。</strong></p></li></ul><p>** 缺点：短进程（线程）等待时间长，从而导致平均等待时间较长。**</p><p>例：有如下CPU阵发进程，时间单位为毫秒。假定进程到达次序为P1，P2，P3，CPU调度状况可用Gantt图表示，如下图所示。</p><p><img src="https://s1.ax1x.com/2018/06/20/CzgXfH.png" alt="img">    <img src="https://s1.ax1x.com/2018/06/20/Czgx1A.png" alt="img"></p><p><strong>先到先服务算法调度性能指标</strong></p><table><thead><tr><th>进程</th><th>到达时间</th><th>运行时间</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>27</td><td>0</td><td>27</td><td>27</td><td>1</td></tr><tr><td>P2</td><td>1</td><td>3</td><td>27</td><td>30</td><td>29</td><td>9.67</td></tr><tr><td>P3</td><td>2</td><td>5</td><td>30</td><td>35</td><td>33</td><td>6.6</td></tr></tbody></table><p>平均周转时间=29.67ms,平均带权周转时间=5.76ms。</p><ul><li><p>** 短作业优先算法（Shortest-Job-First，SJF）——作业**</p><p><strong><a href="">（非抢占式）</a>按照CPU阵发时间递增的次序调度。在到达的作业中挑选所需运行时间（估计值）最短的作业进入主存先运行。</strong></p><p><strong>优点：其平均周转（等待）时间最短，易证。</strong></p><p><strong>缺点：不公平性，一个较长的就绪任务可能由于短任务的不断到达而长期得不到运行机会，甚至被饿死。</strong></p><p>例：如下进程集合以及CPU阵发时间，采用SJF算法，Gantt图如下所示。</p><p><img src="https://s1.ax1x.com/2018/06/20/Cz2cjI.png" alt="img">  <img src="https://s1.ax1x.com/2018/06/20/Cz2LD0.png" alt="img"></p><p>**最短作业优先算法调度性能指标 **</p></li></ul><table><thead><tr><th>进程</th><th>到达时间</th><th>运行时间</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>12</td><td>15</td><td>27</td><td>27</td><td>2.25</td></tr><tr><td>P2</td><td>0</td><td>5</td><td>3</td><td>8</td><td>8</td><td>1.6</td></tr><tr><td>P3</td><td>0</td><td>7</td><td>8</td><td>15</td><td>15</td><td>2.14</td></tr><tr><td>P4</td><td>0</td><td>3</td><td>0</td><td>3</td><td>3</td><td>1</td></tr></tbody></table><p>平均周转时间=13.25ms,平均带权等待时间=1.75ms。</p><ul><li><p>**最高响应比优先算法 （Highest-Response-Ration-Next，HRN） **</p><p><strong><a href="">（非抢占式）</a>最高响应比优先算法是FCFS算法和SJF算法的折中，响应比计算公式如下：</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzRFDx.png" alt="img"></p><p><strong>其中RR——响应比，BT——CPU阵发时间，WT——等待时间=调度时间-到达时间。</strong></p><p>** 按照高响应比优先的原则，在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比，然后选择响应比值最大的作业投入运行。**</p><p><strong>对于同时到达的任务，处理时间短的将被优先调度，处理时间较长的作业将随其等待时间的增加而动态提升其响应比，因而不会出现饥饿现象。</strong></p><p>例：习题P.80 35题</p></li><li><p>**循环轮转算法（Round-Robin，RR） **</p><p><img src="https://s1.ax1x.com/2018/06/20/CzRNGQ.md.png" alt="CzRNGQ.md.png"></p><p><strong>——系统为每一个进程规定一个时间片(time slice)，所有进程按照其时间片的长短轮流地运行。即每当处理机空闲时选择就绪队列头部的进程使其投入运行，同时分给它一个时间片，当此时间片用完时，如果此进程既未结束，其CPU阵发也未因某种原因而等待，则抢占此进程所占有的处理机，将其排在就绪队列的尾部，并选择就绪队列中对头的进程运行。</strong></p><p><strong>①基本轮转：分给所有进程时间片的长度是相同的，且不变的。 若不考虑I/O等待，系统中所有进程以基本均等的速度向前推进。</strong></p><p><strong>②改进轮转：分给不同进程的时间片的长度是不同的，而且（或者）是可变的。系统可以根据不同进程的不同特性为其动态地分配不同长度的时间片，以便达到更灵活的调度效果。</strong></p><p><strong>需认真考虑时间片长度：<br>若过长，则影响系统的响应速度；<br>若过短，则会频繁发生进程切换，增加系统开销。<br>通常，时间片长度为几十毫秒至几百毫秒。</strong></p><p><strong>循环轮转算法特别适用于分时系统，具有公平、响应及时等特点。</strong></p><p><strong>调度时机：①时间片用完；②进程本身结束。</strong></p><p>例：如下进程集合以及CPU阵发时间，采用基本轮转算法，时间片长度为2ms，Gantt图如下所示。</p><p><img src="https://s1.ax1x.com/2018/06/20/CzRHiD.png" alt="img"> <img src="https://s1.ax1x.com/2018/06/20/CzRqRH.png" alt="img"></p><p><strong>循环轮转算法调度性能指标</strong></p><table><thead><tr><th>进程</th><th>到达时间</th><th>运行时间</th><th>开始时间</th><th>完成时间</th><th>周转时间</th><th>带权周转时间</th></tr></thead><tbody><tr><td>P1</td><td>0</td><td>12</td><td>0</td><td>26</td><td>26</td><td>2.17</td></tr><tr><td>P2</td><td>0</td><td>4</td><td>2</td><td>12</td><td>12</td><td>3</td></tr><tr><td>P3</td><td>0</td><td>7</td><td>4</td><td>22</td><td>22</td><td>3.14</td></tr><tr><td>P4</td><td>0</td><td>3</td><td>6</td><td>15</td><td>15</td><td>5</td></tr></tbody></table><p>平均周转时间=18.75ms，平均带权周转时间=3.33ms。</p></li></ul><h2 id="2-实时调度算法edf-rms"><a class="markdownIt-Anchor" href="#2-实时调度算法edf-rms"></a> 2. 实时调度算法（EDF、RMS）</h2><blockquote><p><strong>需用公式进行判断</strong>，所需表格会提供</p></blockquote><ul><li><p><strong>最早截止期优先调度(Earliest-Deadline-First,EDF)</strong></p><p><strong>最早截止期优先调度(Earliest-Deadline-First,EDF)优先选择完成截止期最早的实时任务。对于新到达的实时任务，如果其完成截止期先于正在运行任务的完成截止期，则重新分派处理机，即抢占。可证，对EDF算法，公式</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzWPJg.png" alt="img"></p><p>**是实时任务可调度的充分条件。 **</p><p>例：表3-1给出两个周期性实时任务</p></li></ul><table><thead><tr><th><strong>进程</strong></th><th><strong>就绪时间</strong></th><th><strong>处理时间</strong></th><th><strong>完成截止期</strong></th><th><strong>发生周期</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td><strong>0</strong></td><td><strong>10</strong></td><td><strong>20</strong></td><td><strong>20</strong></td></tr><tr><td><strong>B</strong></td><td><strong>0</strong></td><td><strong>25</strong></td><td><strong>50</strong></td><td><strong>50</strong></td></tr></tbody></table><p>按最早截止期、可抢先原则调度的结果如图3-17所示 。</p><p><img src="https://s1.ax1x.com/2018/06/20/CzWzc9.png" alt="CzWzc9.png"></p><ul><li><p><strong>速率单调调度(Rate-Monotonic Scheduling,RMS)</strong></p><p><strong>速率单调调度(Rate-Monotonic Scheduling,RMS)是面向周期性实时任务，属于非抢占式调度范畴。RMS将任务的周期作为调度参数，其发生频率越高，调度级别越高。已证，RMS算法可调度的条件如下：</strong><br><img src="https://s1.ax1x.com/2018/06/20/CzfP76.png" alt="img"></p><p><strong>对应不同的n值，表3-2给出了RMS算法可调度的上界值。可看出，随着任务数的增加，调度限制趋近于ln2≈0.693。</strong></p><p><strong>表3-2 RMS上限值</strong></p></li></ul><table><thead><tr><th><strong>n</strong></th><th><img src="https://s1.ax1x.com/2018/06/20/Czfcv9.png" alt="img"></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>1.0</strong></td></tr><tr><td><strong>2</strong></td><td><strong>0.828</strong></td></tr><tr><td><strong>3</strong></td><td><strong>0.780</strong></td></tr><tr><td><strong>4</strong></td><td><strong>0.757</strong></td></tr><tr><td><strong>5</strong></td><td><strong>0.743</strong></td></tr><tr><td><strong>6</strong></td><td><strong>0.735</strong></td></tr><tr><td><strong>…</strong></td><td><strong>…</strong></td></tr><tr><td><strong>∞</strong></td><td><strong>ln2≈0.693</strong></td></tr></tbody></table><p>例：考虑表3-3所示的三个周期性实时任务。</p><p><strong>表3-3 周期性实时任务</strong></p><table><thead><tr><th><strong>进程</strong></th><th><strong>发生周期Ti</strong></th><th><strong>处理时间Ci</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td><strong>100</strong></td><td><strong>20</strong></td></tr><tr><td><strong>B</strong></td><td><strong>150</strong></td><td><strong>40</strong></td></tr><tr><td><strong>C</strong></td><td><strong>350</strong></td><td><strong>100</strong></td></tr></tbody></table><p>由于<br><img src="https://s1.ax1x.com/2018/06/20/CzfWHx.png" alt="img"><br>因而可知RMS能够满足所有任务的调度要求。具体调度结果如图3-18所示。<br><img src="https://s1.ax1x.com/2018/06/20/Czf4UK.png" alt="img"></p><p>从CPU利用率来说，RMS算法不及EDF算法效率高，但具有如下优势：<br>(1)RMS是非抢占式的，实现简单；<br>(2)二者效率相差并不十分明显，对于具体任务集合来说，处理机利用率常可达到90%左右。</p><p>作业：P79 32题</p><h2 id="3银行家算法"><a class="markdownIt-Anchor" href="#3银行家算法"></a> 3.银行家算法</h2><blockquote><p>Banker’s algorithm, E.W. Dijkstra.</p></blockquote><p><strong>进程：事先申明所需资源最大量（并不分配）</strong></p><p><strong>系统：对每个可满足的资源申请命令进行安全性检查。</strong></p><p><strong>P={p1,p2,…,pn};</strong><br>**R={r1,r2,…,rm}; 　**</p><p>**数据结构：　**</p><p><strong>Available: array[1…m]of integer; //系统可用资源</strong><br><strong>Claim: array[1…n,1…m]of integer; //进程最大需求</strong><br><strong>Allocation: array[1…n,1…m]of integer; //当前分配</strong><br><strong>Need: array[1…n,1…m]of integer; //尚需资源</strong><br><strong>Request: array[1…n,1…m]of integer; //当前请求</strong></p><p><strong>临时变量：</strong></p><p><strong>Work: array[1…m]of integer;</strong><br><strong>Finish: array[1…n]of boolean;</strong></p><p><strong>设X,Y为下标1…<em>l</em> 的一维数组：</strong><br>**  X≤Y 等价于 任意j (1≤j≤<em>l</em>), X[j]≤Y[j]<br>X:=Y 等价于 任意j (1≤j≤<em>l</em>), X[j]:=Y[j]<br>X:=c 等价于 任意j (1≤j≤<em>l</em>), X[j]:=c<br>X±Y 等价于 任意j (1≤j≤<em>l</em>), X[j]±Y[j] **</p><p><strong>银行家算法——资源分配算法</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzhCvj.png" alt="img"></p><p><strong>银行家算法——安全性检查算法</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzhiKs.png" alt="img"></p><p><strong>例：设系统中有三个资源类{A,B,C}。R={A(10),B(5),C(7)}；P={p0,p1,p2,p3,p4}。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Czhkbq.png" alt="img"></p><p><strong>安全进程序列：&lt;p1,p3,p4,p2,p0&gt;<br>p1请求：Request[1]=(1,0,2),假定分配：</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Czh2Rg.png" alt="img"></p><p>** 安全进程序列：&lt;p1,p3,p4,p2,p0&gt;**</p><p>** 若在上面新的状态下:<br>p4请求：Request[4]=(3,3,0), 不能满足，等待；<br>p0请求：Request[0]=(0,2,0), 不安全，等待。**</p><p><img src="https://s1.ax1x.com/2018/06/20/CzhRzQ.png" alt="img"></p><p><strong>例：银行家算法的保守性。R={A,B}, 申请a, b; 释放a, b</strong><br><strong>P={p1,p2}, p1: a b a b;   p2:b b b a b a ,假定某时刻系统状态如下:</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Czhhss.png" alt="img"></p><p><strong>Request[2]=(0,1), 该请求Request[2]≤Need[2]且Request[2]≤Avaiable,假定分配。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Czh4Ln.png" alt="img"></p><p><strong>Request[2]=(0,1), 不安全，取消分配（分配不导致死锁，如p2(b),p1(b),p1(a),p1(b),p2(b),p2(a),p2(b),p2(a)） 。</strong></p><p><strong>结论：</strong></p><p><strong>Remarks1:<br>银行家算法要求条件：进程所需资源最大量, 这个信息对于充要性分析是不够的。</strong></p><p><strong>Remarks2:<br>假设：进程预先给出有关资源的命令序列，则可以给出死锁避免的充要性算法，复杂度（NP Complete)。</strong></p><p><strong>Remarks3:<br>预先给出进程有关资源的命令序列是困难的(程序的分支和循环）。</strong></p><h2 id="4-信号灯与pv操作的应用"><a class="markdownIt-Anchor" href="#4-信号灯与pv操作的应用"></a> 4. 信号灯与PV操作的应用</h2><p><strong>例4.2：生产者-消费者问题(producers and consumers problem)。假设某工厂一生产线上有一只用来装物品的箱子，其中有<em>k</em>个位置(<em>k</em>≥1)，每个位置可容纳一件物品，如图4-6所示。又设有两组人，分别为生产者和消费者，其活动分别为：</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/CzhXQJ.png" alt="img">       <img src="https://s1.ax1x.com/2018/06/20/Czhjy9.png" alt="img"></p><p><strong>分析：</strong><br><strong>●当箱子已满时，生产者应等待于①处，待消费者执行到④处再将其唤醒；<br>●当箱子已空时，消费者应等待于③处，待生产者执行到②处时将其唤醒。<br>●箱子中的位置相当于生产者的资源，用信号灯变量S1表示，其初值为k，即初始时有k个空位置；<br>●物品相当于消费者的资源，用信号灯变量S2 表示，其初值为0，即初始时有0件物品。<br>●缓冲区首尾相连成环形如图4-7所示，in为放入指针，out为取出指针。<br>●信号灯mutex用于进程对共享变量buffer和in，out的互斥。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz4MY8.png" alt="img"><img src="https://s1.ax1x.com/2018/06/20/Cz4gTx.png" alt="img"></p><p><strong>例4.3：读者-写者问题(readers and writers problem)。设有一组共享数据DB和两组并发进程，一组进程只对此数据进行读操作，另一组进程可对此组数据执行写操作(当然同时也可执行读操作)。如图4-8所示，前一组进程称作读者，后一组进程称作写者。为了保证共享数据的完整性，要求：(1)多个读者的操作可同时进行；(2)多个写者的操作不可同时进行；(3)任何读者与写者的操作不可同时进行。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz4I6H.png" alt="img"></p><p><strong>分析：<br>●变量r_w_w用来保证读者与写者之间的互斥以及写者与写者之间的互斥；<br>●变量readCount用来记录读者的数目；<br>●变量mutex用来实现读者对于变量readCount访问的互斥。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz4oXd.png" alt="img"></p><p><strong>例4.4：3台打印机的管理。<br>设有3台类型相同的打印机，其编号分别为1、2、3，试编写一个申请函数require和一个释放函数return。当有打印机空闲时，返回分得的打印机编号，当无打印机空闲时则等待，被唤醒后返回分得的打印机的编号。retrun用于释放制定编号的打印机，当有申请者等待时就将其一唤醒。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz47nA.png" alt="img"></p><h2 id="5-页式段式存储管理计算"><a class="markdownIt-Anchor" href="#5-页式段式存储管理计算"></a> 5. 页式段式存储管理计算</h2><blockquote><p><strong>具体戳书上 P181- P193 或 课件第六章，例题为P225 25、26</strong></p><p>以下提供<strong>置换算法</strong>内容，相应例题为<strong>P224 17</strong></p></blockquote><ul><li><p>**置换算法(replacement algorithm) **</p><p><strong>用于：页淘汰、段淘汰、快表淘汰。 Objective: lowest page-fault rate.</strong></p><p><strong>例：有如下页面访问序列： **<br>** 6, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 6, 0, 1</strong><br><strong>假定内存为该进程分配3个物理页架，开始时内存页架为空。</strong></p><p><strong>(1)最佳淘汰算法(OPT–optimal) 淘汰将来最长时间以后才用到的。<br>效率最高，not feasible。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5KBR.png" alt="img"></p><p><strong>缺页故障次数为9。</strong></p><p><strong>(2)先进先出(FIFO) 淘汰最先调入的。<br>实现：队列，将所有页面按照进入内存的次序排成一个队列，当一个页面由外存调入内存时排入队尾，调入时间最早的页面被淘汰。</strong><br><strong>依据: 先进入的可能已经使用完毕。<br>negative case: 有些代码和数据可能整个程序运行中用到。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5MH1.png" alt="img"></p><p><strong>缺页故障次数为15。<br>FIFO页面淘汰算法会产生异常现象（Belady现象），即：当分配给进程的物理页面数增加时，缺页次数反而增加，称之为Belady异常。</strong></p><p><strong>(3)使用过最久的先淘汰（LRU） 淘汰最近一次访问距当前时间最长的。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5lAx.png" alt="img"></p><p><strong>缺页故障次数为12。<br>实现：stack。访问时，其对应的页面号由栈内取出送入栈顶。</strong><br><strong>淘汰时，取栈底页面号对应的页面。</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz51N6.png" alt="img"></p></li></ul><h2 id="6-磁盘的物理特性"><a class="markdownIt-Anchor" href="#6-磁盘的物理特性"></a> 6. 磁盘的物理特性</h2><p><img src="https://s1.ax1x.com/2018/06/20/Cz5Uud.png" alt="Cz5Uud.png"><br>**<br>所有扇区以一维的形式加以编号，编号顺序为0,1,…,<em>l</em>×m×n-1，称为块号。**</p><p><strong>一维地址与三维地址的对应关系?</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5BUP.png" alt="img"></p><p><strong>编址方法：使相邻块物理上最近，提高访问速度。<br>扇区号先变化，其次是盘面号，最后是柱面号。</strong></p><p><em><em>例：柱面号为0～1，盘面号为0～2，扇区号为0～2</em>。<em>设柱面数为</em>l</em>，盘面数为<em>m</em>，扇区数为<em>n</em>；<br>又设柱面号为<em>i</em>，盘面号为<em>j</em>，扇区号为<em>k</em>，块号为<em>b</em>。则<em>l</em>=2; <em>m</em>=3; <em>n</em>=3**</p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5D4f.png" alt="img"></p><p><strong>三维地址→一维地址：</strong><br><em><em><em>b</em>=<em>i</em>×</em>m</em>×<em>n</em>+<em>j</em>×<em>n</em>+<em>k</em><br>=((<em>i</em>×<em>m</em>)+<em>j</em>)×<em>n</em>+<em>k</em>**</p><p><strong>一维地址→三维地址：</strong><br>** <em>i</em>=<em>b</em>÷(<em>m</em>×<em>n</em>)<br><em>j</em>=<em>b</em> mod (<em>m</em>×<em>n</em>) ÷<em>n</em><br><em>k</em>=<em>b</em> mod (<em>m</em>×<em>n</em>) mod <em>n</em>**</p><h2 id="7-设备调度"><a class="markdownIt-Anchor" href="#7-设备调度"></a> 7.  设备调度</h2><ul><li><p><strong>磁盘输入输出参数</strong></p><p><strong>三个因素：寻道时间、旋转延迟、传输时间。</strong></p><p><strong>(1)寻道时间Ts=m×n+s<br>n为跨越磁道数，m为跨越一个磁道所用时间，s为启动时间。</strong></p><p><strong>(2)旋转延迟Tr=1/(2r)<br>r为磁盘转速，这里是平均旋转延迟。</strong></p><p><strong>(3)传输时间Tt=b/(rN)<br>b为读写字节数，r为磁盘转速，N为一条磁道上的字节数。</strong></p><p><strong>(4)访问时间Ta=Ts+Tr+Tt=m×n+s+1/(2r)+b/(rN)<br>访问磁盘通常是以扇区(块)为单位的，令M为一个磁道上的扇区个数，则一个扇区的访问时间为：Ta=Ts+Tr+Tt=m×n+s+1/(2r)+1/(rM)</strong></p></li><li><p><strong>磁盘引臂调度算法</strong><br><strong>优化服务顺序<br>考虑因素<br>●公平性 防止饿死<br>●高效性 减少磁盘引臂移动量</strong></p><p><strong>(1)先到先服务（FCFS）</strong></p><p><strong>请求序列：130，42，180，15，108，68，97</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5Wbn.png" alt="img"></p><p>**移动量: (130-53)+(130-42)+(180-42)+(180-15)+(108-15)+(108-68)+(97-68)=630 **</p><hr><p><strong>(2)最短寻找时间优先（SSTF）</strong></p><p><strong>请求序列：130，42，180，15，108，68，97</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5hEq.png" alt="img"></p><p>**移动量: (53-42)+(180-42)+(180-15)=314 　**</p><hr><p><strong>(3)电梯算法 LOOK</strong></p><p><strong>请求序列：130，42，180，15，108，68，97</strong></p><p><img src="https://s1.ax1x.com/2018/06/20/Cz555V.png" alt="img"></p><p>**LOOK移动量: (53-15)+(180-15)=203 　**</p><hr><p><strong>(4) 循环扫描 C-SCAN（C-LOOK）</strong></p></li></ul><p>** 请求序列：130，42，180，15，108，68，97**</p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5oCT.png" alt="img"></p><p>**特点：所有磁道的最长等待时间相同 **</p><ul><li><strong>例题：一个只有单一移动磁头的磁盘，磁道由外向内编号为0、1、2……、199，磁头移动一个磁道所需时间为1ms，每个磁道有100个扇区，磁盘转速为6000rpm。采用循环Look引臂调度算法，当前引臂位置处于第100磁道，当前移动方向为由外向内，并规定引臂向内扫描时为路径请求服务。对于磁道请求120、85、70、30，每个请求访问对应磁道上的一个扇区，试问：<br>(1)给出引臂移动序列，计算引臂移动量和寻道时间，忽略启动时间;<br>(2)计算平均旋转延迟时间；<br>(3)计算传输时间；<br>(4)计算所有访问处理时间。</strong></li></ul><p>** 解答：**</p><p><img src="https://s1.ax1x.com/2018/06/20/Cz5Hv4.png" alt="img"></p><p><strong>(1)磁盘引臂移动序列为100、120、30、70、85，跨越磁道数为：20+90+40+15=165。共需寻道时间165×1ms=165ms。</strong></p><p><strong>(2)1次访问磁盘的旋转延迟为Tr=1/(2r)=1/(2×6000rpm)=1/(2×100rps)=5ms,4次访问磁盘的旋转延迟为4×5ms=20ms。</strong></p><p><strong>(3)1次访问磁盘的传输时间为Tt=1/(rM)=1/(6000rpm×100)=1/(100rps×100)=0.1ms,4次访问磁盘的传输时间为4×0.1ms=0.4ms。</strong></p><p><strong>(4)所有访问处理时间为：165+20+0.4=185.4ms。</strong></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简答题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简答题&quot;&gt;&lt;/a&gt; 简答题&lt;/h1&gt;
&lt;h2 id=&quot;1操作系统的主要功能5点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1操作系统的主要功能5点&quot;&gt;&lt;/a&gt; 1.操作系统的主要功能（5点）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;根据课本：1. 进程、线程与作业，2. 中断与处理器调度，2. 互斥、同步与通信，3. 死锁与饥饿，4.存储管理，5. 文件系统，6.设备与输入输出管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据百度：处理器管理、存储器管理、设备管理、文件管理、作业管理（来自百度百科）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="复习总结" scheme="http://yoursite.com/categories/%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="复习" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Web编程技术期末复习</title>
    <link href="http://yoursite.com/2018/06/17/Web%E7%BC%96%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/17/Web编程复习/</id>
    <published>2018-06-17T08:22:57.000Z</published>
    <updated>2018-06-19T06:20:01.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdbc与jsp全称"><a class="markdownIt-Anchor" href="#jdbc与jsp全称"></a> jdbc与jsp全称</h1><ul><li><strong>jdbc</strong> 全称为 <strong>Java Database Connectivity</strong></li><li><strong>jsp</strong> 全称为 <strong>Java Server Pages</strong>, Java服务端网页</li></ul><h1 id="web服务器端开发技术"><a class="markdownIt-Anchor" href="#web服务器端开发技术"></a> Web服务器端开发技术</h1><ul><li><strong>CGI、PHP、ASP、JSP</strong></li></ul><h1 id="常用web服务器"><a class="markdownIt-Anchor" href="#常用web服务器"></a> 常用Web服务器</h1><ul><li><strong>IIS、Apache、Tomcat、BEA WebLogic、JRun、Jboss服务器、IBM公司的WebSphere服务器</strong></li></ul><a id="more"></a><h1 id="web编辑工具"><a class="markdownIt-Anchor" href="#web编辑工具"></a> Web编辑工具</h1><ul><li><strong>FrontPage、Dreamweaver、EditPlus、UltraEdit、Eclipse</strong></li></ul><h1 id="jsp内置对象"><a class="markdownIt-Anchor" href="#jsp内置对象"></a> JSP内置对象</h1><ul><li><strong>out、request、response、session、application、exception</strong></li></ul><h1 id="数据库的四要素"><a class="markdownIt-Anchor" href="#数据库的四要素"></a> 数据库的四要素</h1><ul><li><strong>驱动、URL、用户名、密码</strong></li></ul><h1 id="静态包含和动态包含的区别"><a class="markdownIt-Anchor" href="#静态包含和动态包含的区别"></a> 静态包含和动态包含的区别</h1><ul><li><p><strong>include指令</strong></p><ul><li><strong>功能：指定在JSP文件中包含的一个静态的文件，即在JSP文件被编译时需要插入的文本或代码。</strong></li><li><strong>语法：&lt;%@  include file= “文件名称”%&gt;</strong></li><li><strong>注意：当使用include指令时，包含文件是静态包含，即这个被包含的文件将被插入到JSP文件中去。所包含的文件可以是JSP文件、HTML文件、文本文件、甚至一段Java代码。但是在所包含的文件中不能使用“&lt; html &gt; &lt; /html &gt;”，“ &lt; body &gt; &lt; /body &gt;”标记，因为这将会影响到原有的JSP文件中所使用的相同标记。如果所包含的是一个JSP文件，则该文件将会执行。</strong></li></ul></li><li><p><strong>include操作</strong></p><ul><li><p><strong>功能：在JSP文件中包含一个静态或动态文件。</strong></p></li><li><p><strong>语法：&lt; jsp:include  page=�relativeURL | &lt;%= expression%&gt;�  /&gt;</strong></p></li><li><p><strong>属性说明：page=�relativeURL | &lt;%= expression %&gt;� ：</strong></p><p><strong>属性值指明所包含文件的相对路径，或者由expression所代表的相对路径的表达式。</strong></p></li><li><p><strong>注意：&lt; jsp:include &gt;动作标签可以包含静态文件或者动态文件。但二者有很大的不同。若包含静态文件，被包含文件的内容将直接嵌入到JSP文件中存放&lt; jsp:include &gt;指令的位置，而且当静态文件改变时，必须将JSP文件重新保存（重新转译），然后才能访问到变化了的文件。如果包含的文件是动态文件，那么将把动态执行的结果传回包含它的JSP页面中。若动态文件被修改，则重新运行JSP文件就会同步发生变化。而且书写该标签时，“jsp”、“：”以及“include”三者之间不要留有空格，否则会出错。</strong></p></li></ul></li></ul><p><img src="https://i.loli.net/2018/06/17/5b2621395ad7c.png" alt="include"></p><h1 id="服务器跳转与客户端跳转的区别"><a class="markdownIt-Anchor" href="#服务器跳转与客户端跳转的区别"></a> 服务器跳转与客户端跳转的区别</h1><p><img src="https://i.loli.net/2018/06/17/5b26213959aa5.jpg" alt="跳转"></p><h1 id="jsp开发环境搭载步骤"><a class="markdownIt-Anchor" href="#jsp开发环境搭载步骤"></a> JSP开发环境搭载步骤</h1><ul><li><strong>具体戳 模块1第一章引论 - 1.5开发环境搭建</strong><br><strong>1、安装JDK 添加环境变量。</strong><br><strong>2、安装Tomcat在IE中输入 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 或 <a href="http://xn--ip-6m8d2b:8080" target="_blank" rel="noopener">http://本机ip:8080</a> 或 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 。检验是否启动成功出现猫，若此时浏览器中显示Tomcat的欢迎和管理画面，即表示服务器安装和启动成功。</strong><br><strong>3、安装MySQL。</strong><br><strong>4、安装Eclipse，设置Eclipse中的jdk和tomcat环境。</strong><br>** 5、关于Tomcat服务器虚拟目录的配置打开Tomcat的安装目录，进入conf/server.xml，在&lt; /host &gt;上方加入&lt; Context path=&quot;/虚拟目录名&quot; docBase=�虚拟目录路径�/&gt;。**</li></ul><h1 id="jsp-内置对象的作用范围"><a class="markdownIt-Anchor" href="#jsp-内置对象的作用范围"></a> JSP 内置对象的作用范围</h1><ul><li><p><strong>request</strong></p><ul><li><strong>将属性保存在一次请求范围内，前提是必须使用服务器跳转&lt; jsp:forward &gt;</strong></li></ul><p><img src="https://i.loli.net/2018/06/17/5b26213959e04.jpg" alt="request"></p></li><li><p><strong>session</strong></p><ul><li><strong>session对象在第一个jsp页面被装载时自动创建，完成会话期管理。当用户第一次登录网站时，服务器端的JSP引擎将为该用户生成一个独一无二的session对象，用以记录该用户的个人信息。一旦该用户退出网站，那么属于他的session对象将会被注销。session对象可以绑定若干个人信息或者Java对象。如果不同session对象内部定义了相同的变量名，那么这些同名变量是不会相互干扰的。需要说明的是，session对象中所保存和检索的信息不能是基本数据类型，必须是Java语言中相应的Object对象。</strong></li></ul><p><img src="https://i.loli.net/2018/06/17/5b2621395b222.jpg" alt="session"></p></li><li><p><strong>application</strong></p><ul><li><strong>application对象与session对象相似，当一个用户首次访问服务器上的一个JSP页面时，服务器的JSP引擎就为该用户创建了application对象，当客户在服务器的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session对象不同的是，所有用户的application对象都是同一个，即所有用户共享这个application对象。application对象由服务器创建，也由服务器自动清除，不能被用户创建和清除。下面介绍application对象中的方法。</strong></li></ul><p><img src="https://i.loli.net/2018/06/17/5b26213949178.jpg" alt="application"></p></li></ul><h1 id="param操作"><a class="markdownIt-Anchor" href="#param操作"></a> param操作</h1><ul><li><strong>功能：为其他标签提供附加信息。</strong></li><li><strong>语法：&lt;jsp:param name=”参数名字” value=”参数的值”/&gt;</strong></li><li><strong>注意：该标签必须配合&lt; jsp:include &gt;、&lt; jsp:forward &gt;、~~&lt; jsp:plugin &gt;~~动作标签一起使用。当与&lt; jsp: include &gt;标签一起使用时，可以将param组件中的参数值传递到include指令要包含的文件中去。</strong></li></ul><h1 id="jdbc-应用程序接口"><a class="markdownIt-Anchor" href="#jdbc-应用程序接口"></a> JDBC 应用程序接口</h1><ul><li><strong>书本P113</strong><ul><li><strong>java.sql.DriverManager：处理驱动的调入并且对产生新的数据库连接提供支持。</strong></li><li><strong>java.sql.Connection：代表对特定数据库的连接。</strong></li><li><strong>java.sql.Statement：代表一个特定的容器，对一个特定的数据库执行SQL语句。</strong></li><li><strong>java.sql.ResultSet：控制对一个特定语句的行数据的存储。</strong></li></ul></li><li><strong>课件模块3第7章</strong><ul><li><strong>DriverManager类：依据数据库的不同，管理JDBC驱动。</strong></li><li><strong>Connection接口：负责连接数据库并担任传送数据的任务。</strong></li><li><strong>Statement接口：由Connection产生，负责执行SQL语句。</strong></li><li><strong>ResultSet接口：负责保存Statement执行后所产生的查询结果。</strong></li></ul></li></ul><hr><hr><h1 id="-补充内容-"><a class="markdownIt-Anchor" href="#-补充内容-"></a> ---------补充内容---------</h1><hr><ul><li><p>**在JSP中如果要应用JSP提供的JavaBean的标签操作简单类，则此类必须满足如下的开发要求： **</p><ol><li><strong>所有的类必须放在一个包中，在Web中没有包的类是不存在的。</strong></li><li><strong>所有的类必须声明为public class，才能被外部所访问。–&gt;类名称与文件名一致。</strong></li><li><strong>类中所有的属性必须封装，即使用private声明。</strong></li><li>**封装的属性如果需要被外部所操作，则必须编写对应的setter、getter方法。 **</li><li><strong>一个JavaBean中至少存在一个无参数构造方法，此方法为JSP中的标签所使用。</strong></li></ol><p>注：<strong>如果在一个类中只包含了属性、setter、getter方法，那么这种类就称为简单JavaBean</strong><br><strong>POJO（Plain Ordinary Java Object）简单Java对象</strong><br><strong>VO(Value Object)与简单Java对象对应，专门用于传递值的操作上。</strong><br><strong>TO(Transfers Object)传输对象</strong></p></li><li><p><strong>Servlet可以用来提交表单。</strong></p></li><li><p><strong>第一次访问比第二次访问慢，因为需要编译。</strong></p></li><li><p><strong>如何控制年龄的范围（1-150）？——在客户端进行控制。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jdbc与jsp全称&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jdbc与jsp全称&quot;&gt;&lt;/a&gt; jdbc与jsp全称&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jdbc&lt;/strong&gt; 全称为 &lt;strong&gt;Java Database Connectivity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jsp&lt;/strong&gt; 全称为 &lt;strong&gt;Java Server Pages&lt;/strong&gt;, Java服务端网页&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;web服务器端开发技术&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web服务器端开发技术&quot;&gt;&lt;/a&gt; Web服务器端开发技术&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CGI、PHP、ASP、JSP&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;常用web服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用web服务器&quot;&gt;&lt;/a&gt; 常用Web服务器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IIS、Apache、Tomcat、BEA WebLogic、JRun、Jboss服务器、IBM公司的WebSphere服务器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="复习总结" scheme="http://yoursite.com/categories/%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="复习" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java Web 编程技术</title>
    <link href="http://yoursite.com/2018/06/17/Java%20Web%20%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/06/17/Java Web 编程技术/</id>
    <published>2018-06-17T00:56:57.000Z</published>
    <updated>2018-06-17T01:05:57.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-web-编程技术"><a class="markdownIt-Anchor" href="#java-web-编程技术"></a> Java Web 编程技术</h1><hr><blockquote><p>基础知识笔记</p></blockquote><h2 id="一-jsp技术"><a class="markdownIt-Anchor" href="#一-jsp技术"></a> 一、jsp技术</h2><a id="more"></a><hr><h3 id="1-jsp基本语法"><a class="markdownIt-Anchor" href="#1-jsp基本语法"></a> 1. JSP基本语法</h3><hr><h4 id="11-jsp-scriptlets"><a class="markdownIt-Anchor" href="#11-jsp-scriptlets"></a> 1.1. JSP Scriptlets</h4><ul><li>语法格式：<code>&lt;% java 代码（变量、方法、表达式等）%&gt;</code></li><li>注意点：<ul><li>可以进行属性的定义，也可以输出内容，==<strong>但不可以进行方法的定义</strong>==。</li></ul></li></ul><h4 id="12-jsp-声明语句"><a class="markdownIt-Anchor" href="#12-jsp-声明语句"></a> 1.2. JSP 声明语句</h4><ul><li>语法格式：<code>&lt;@! 定义的变量或方法等 %&gt;</code></li><li>注意点：<ul><li>可以进行属性的定义，以及方法的定义，==<strong>但不可以进出输出内容</strong>==。</li></ul></li></ul><h4 id="13-jsp表达式"><a class="markdownIt-Anchor" href="#13-jsp表达式"></a> 1.3. JSP表达式</h4><ul><li>语法格式：<code>&lt;%= expression %&gt;</code></li><li>注意点：<ul><li><code>&lt;%=</code> 和 <code>%&gt;</code> 标记之间插入的是表达式，<strong>不能插入语句</strong></li><li>表达式或变量后面不能有<strong>分号</strong></li></ul></li></ul><h4 id="14-jsp注释"><a class="markdownIt-Anchor" href="#14-jsp注释"></a> 1.4. JSP注释</h4><ul><li>语法格式：HTML注释：<code>&lt;!-- 注释信息 --&gt;</code>，JSP注释：<code>&lt;%-- 注释信息 --&gt;</code></li><li>注意点：<ul><li>HTML注释可通过浏览器查询源代码看到，JSP注释则不会。</li></ul></li></ul><hr><h3 id="2-jsp指令"><a class="markdownIt-Anchor" href="#2-jsp指令"></a> 2. JSP指令</h3><hr><h4 id="21-page指令"><a class="markdownIt-Anchor" href="#21-page指令"></a> 2.1 . page指令</h4><blockquote><p>对页面的某些特性进行描述</p></blockquote><ul><li>语法格式：<code>&lt;%@ page 属性名1=&quot;&quot;... %&gt;</code></li><li>常见属性：<strong>language、import、session、isErrorPage、errorPage、contentType、pageEnCoding</strong></li><li>注意点：<ul><li>除了import 属性以外，其他属性均只能出现一次</li><li>page 指令的属性名称区分大小写</li><li>page指令对整个页面有效，与其书写位置无关，一般写与最前面。</li></ul></li></ul><h4 id="22-include指令"><a class="markdownIt-Anchor" href="#22-include指令"></a> 2.2 . include指令</h4><blockquote><p>JSP页面<strong>静态包含</strong>一个文件</p></blockquote><ul><li>语法格式：<code>&lt;%@ include file=&quot;被包含的文件地址&quot; %&gt;</code></li><li>注意点：<ul><li>include 指令只有 file 一个属性。</li><li>插入文件的路径一般使用相对路径。</li><li>引入的文件必须遵循 JSP 语法，内容可包含静态HTML、JSP页面所具有的一切内容。</li></ul></li></ul><hr><h3 id="3-jsp-隐式对象"><a class="markdownIt-Anchor" href="#3-jsp-隐式对象"></a> 3. JSP 隐式对象</h3><hr><blockquote><p>为了便于一些对象的重复使用，JSP 提供9个隐式（内置）对象，可直接在 JSP 页面中使用</p></blockquote><h4 id="31-out对象"><a class="markdownIt-Anchor" href="#31-out对象"></a> 3.1 . out对象</h4><blockquote><p>用于页面输出</p></blockquote><ul><li>语法格式：<code>out.println(&quot;...&quot;);</code></li><li>注意点：<ul><li>通过out隐式对象写入数据相当于将数据插入到 JspWriter 对象的缓冲区中，只有调用了 ServletResponse.getWriter() 方法，缓冲区中的数据才能真正的写入到Servlet 引擎所提供的缓冲区。</li><li>如需立即写入缓冲区，可通过 <strong>page 指令</strong> 将 <strong>buffer 属性</strong>设为<strong>0kb</strong>​</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-web-编程技术&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-web-编程技术&quot;&gt;&lt;/a&gt; Java Web 编程技术&lt;/h1&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;基础知识笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-jsp技术&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-jsp技术&quot;&gt;&lt;/a&gt; 一、jsp技术&lt;/h2&gt;
    
    </summary>
    
      <category term="编程知识" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础知识</title>
    <link href="http://yoursite.com/2018/06/16/HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2018/06/16/HTML基础知识/</id>
    <published>2018-06-16T08:26:04.000Z</published>
    <updated>2018-06-17T01:05:15.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><ul><li><p>浏览器访问网页原理</p><ul><li>当我们利用浏览器访问网页时，其实是有真实的物理文件传输，浏览器会先将网页上的内容缓存到本地文件夹中，然后再渲染出来呈现给用户看。</li><li>平时我们在上网时会发现第二次访问比第一次访问快，这是因为第一次访问已经将这个网页上的内容缓存到了本地。</li></ul></li></ul><a id="more"></a><ul><li><p>浏览器请求数据过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户端--&gt;服务器: 发送“请求报文”</span><br><span class="line">服务器--&gt;用户端: 发送“响应报文”</span><br></pre></td></tr></table></figure><ul><li>请求报文<ul><li>请求行+请求头+空行+请求体</li></ul></li><li>响应报文<ul><li>响应行+响应头+响应体</li></ul></li></ul></li><li><p>URL</p><ul><li>我们在浏览器的地址中输入的这个地址就是一个URL。</li><li>URL格式<ul><li><a href="http://127.0.0.1/index.html" target="_blank" rel="noopener">http://127.0.0.1/index.html</a><br><a href="http://127.0.0.1:80/index.html(%E5%AE%8C%E6%95%B4%E6%A0%BC%E5%BC%8F)" target="_blank" rel="noopener">http://127.0.0.1:80/index.html(完整格式)</a></li></ul></li><li>URL拆分<ul><li>URL协议类型：http://</li><li>服务器地址：127.0.0.1</li><li>服务器端口号： :80</li><li>访问的资源名称：index.html</li></ul></li><li>各部分作用<ul><li>IP地址和端口号<ul><li>IP地址相当于现实生活中的地址，例如：福建省莆田市仙游县</li><li>端口号相当于我们现实生活中的的门牌号码，例如：9栋909室</li></ul></li><li>index.html作用<ul><li>当我们通过IP地址和端口号寻找到对应的服务器之后，需要通过资源名称告诉服务器，我们要获取服务器上的哪个资源。</li></ul></li></ul></li></ul></li><li><p>HTTP协议</p><ul><li>HTTP：超文本传输协议</li><li>协议<ul><li>在现实生活中有很多协议，例如租房协议，无论什么协议，他们都是用来规范约束某一类事物</li><li>HTTP协议是规范约束浏览器和服务器之间如何沟通。</li></ul></li></ul></li></ul><h1 id="认识html"><a class="markdownIt-Anchor" href="#认识html"></a> 认识HTML</h1><ul><li><p>HTML作用</p><ul><li>HTML只有一个作用，就是专门用于<strong>描述文本语义</strong>的，也就是说我们可以利用HTML来告诉浏览器哪些是标题，哪些是段落</li><li>这些用于描述其他文本语义的文本，我们称之为标签，并且这些用于描述其他文本语义的标签在浏览器中不会被显示出来</li></ul></li><li><p>HTML的整体框架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>&lt;&gt;:开始标签<br>&lt;/&gt;:结束标签</li><li>&lt;html&gt;标签<ul><li>作用：用于告诉浏览器这是一个网页，也就是说告诉浏览器我是一个HTML文档。</li><li>注意点：其他所有标签都必须写在html标签里面，也就是写在html开始标签与结束标签里面。</li></ul></li><li>&lt;head&gt;标签<ul><li>作用<ul><li>用于给网站添加一些配置信息</li><li>例如<ul><li>指定网站的标题/指定网站小图片</li><li>添加网站的SEO相关的信息（指定网站的关键字/指定网站的描述信息）</li><li>外挂一些外部的CSS/JS文件</li><li>添加一些浏览器适配的的相关内容</li></ul></li></ul></li><li>注意点<ul><li>一般情况下，写在head标签里的内容不会显示给用户看。</li></ul></li></ul></li><li>&lt;title&gt;标签<ul><li>作用<ul><li>专门用于指定网站的标题，并且这个指定的标题将来还会作为用户保存网站的默认标题</li></ul></li><li>注意点<ul><li>title标签必须写在head标签里</li></ul></li></ul></li><li>&lt;body&gt;标签<ul><li>作用<ul><li>专门用于定义HTML文件中能显示给用户查看的内容(文字/图片/音频/视频)</li></ul></li><li>注意点<ul><li>在其他地方写有时也可以看到，但最好不要这样做</li><li>一对html标签中，只能有一对body标签。</li></ul></li></ul></li><li>head内部标签<ul><li>meta标签<ul><li>作用：指定当前网页的字符集</li><li>为什么会有乱码现象？<br>就是因为我们在编写网页时没有指定字符集</li><li>如何解决乱码现象？<br>在head标签中添加<code>&lt;meta charset=&quot;GBK&quot; /&gt;</code></li><li>GBK/GB2312和UTF-8区别<ol><li>GBK/GB2312里面存储的字符比较少，仅仅存储了汉字和一些常用外文，体积比较小</li><li>UTF-8里面存储世界上所有的文字，体积比较大。</li></ol></li><li>注意点<ul><li>在HTML文件中指定的字符集必须和保存这个文件的字符集一致，否则还是会出现乱码。</li></ul></li></ul></li></ul></li></ul></li><li><p>标签的分类</p><ul><li>单标签<ul><li>只有开始标签没有结束标签，也就是由一个&lt;&gt;组成的</li></ul></li><li>双标签<ul><li>有开始标签和结束标签，也就是由一个&lt;&gt;和一个&lt;/&gt;组成的</li></ul></li></ul></li><li><p>DTD文档声明</p><ul><li>由来：由于HTML有很多版本的规范，为了让浏览器能正确的渲染我们的网页，我们需要在HTML第一行告诉浏览器HTML文档使用哪个规范</li><li>HTML5文档声明规范(向下兼容)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意点<ol><li>任何一个标准的HTML网页，第一行一定是DTD文档声明</li><li>DTD文档声明不区分大小写<br>&lt;!DOCTYPE html&gt;<br>&lt;!doctype html&gt;</li><li>DTD文档声明不是一个标签</li><li>浏览器并不完全依赖于DTD文档，它有自己的一套机制。</li><li>没有DTD文档声明的网页也可以正常运行，但为了遵守规定以及减少一些不必要的麻烦，也要在第一行加上声明。</li></ol></li></ul></li><li><p>.htm和 .html扩展名区别</p><ul><li>DOS操作系统(win95/win98)下只支持长度为3位的扩展名，所以是htm</li><li>后续Windos系统中可以大于3位，所以可使用html。</li><li>htm是为了兼容过去的DOS操作系统</li></ul></li></ul><h1 id="基础标签"><a class="markdownIt-Anchor" href="#基础标签"></a> 基础标签</h1><ul><li><p>H标签</p><ul><li><p>作用：用于给文本添加标题语义</p></li><li><p>格式：<code>&lt;h1&gt;xxxxxx&lt;/h1&gt;</code></p></li><li><p>注意点</p><ul><li>H标签是用来给文本添加标题语义的，而不是用来修改文本的样式的</li><li>H标签一共有6个，从H1~H6，超过6个无效。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>被H系列标签包裹的内容会独占一行，H1最大，H6最小</li><li>在企业开发中，一定要慎用H系列的标签，特别是H1标签，一般一个界面只能出现一个H1标签（和SEO有关）</li></ul></li></ul></li><li><p>P标签</p><ul><li>作用：告诉浏览器哪些文字是一个段落</li><li>格式：<code>&lt;p&gt;一个段落&lt;/p&gt;</code></li><li>注意点<ul><li>在浏览器中单独占一行</li></ul></li></ul></li><li><p>Hr标签</p><ul><li>作用：在浏览器上显示一条分割线</li><li>格式：<code>&lt;hr /&gt;</code></li><li>注意点<ul><li>在浏览器中独占一行</li><li><code>&lt;hr&gt;</code>或<code>&lt;hr /&gt;</code>均可，前者为HTML规范，后者为XHTML规范</li><li>在HTML5中，写不写<code>/</code>均可</li></ul></li></ul></li><li><p>注释</p><ul><li>作用：让程序具有可读性</li><li>格式：<code>&lt;!--被注释的内容--&gt;</code></li><li>注意点：<ul><li>被注释的内容不会再浏览器中显示</li></ul></li></ul></li><li><p>img标签</p><ul><li><p>作用：告诉浏览器我们需要显示一张图片</p></li><li><p>格式：<code>img src=&quot;&quot;</code></p><ul><li>src是英文source的缩写，用来告诉img标签需要显示的图片名称</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ul><li>和H系列标签/P标签/Hr标签不一样，img标签<strong>不会独占一行</strong></li><li>width：宽度  height：高度<ol><li>用来设置显示图片的宽高</li><li>如果没有指定，则会按照默认的宽高显示</li><li>如果只指定一个，则另一个等比进行缩放</li></ol></li><li>title：当鼠标悬停在图片上时，弹出的描述框</li><li>alt：altermate(交换/替换)的缩写，当图片找不到时显示的内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img.jpg"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">title</span>=<span class="string">"图片内容"</span> <span class="attr">alt</span>=<span class="string">"图片消失了"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>路径问题<br>给src属性赋值有两种方式</p><ul><li>相对路径赋值<br>每次从.html文件所在的文件夹开始查找<ol><li>同级：图片与.html文件存储在同一个文件夹<ul><li>格式：<code>src=&quot;img.jpg&quot;</code></li><li>含义：在html文件所在的文件夹中查找名称叫做img.jpg的图片</li></ul></li><li>下级：存储图片的文件夹和.html文件在同一个文件夹<ul><li>格式：<code>src=&quot;image/img.jpg&quot;</code></li><li>含义：在html文件所在的文件夹中查找image文件夹，在image文件夹里查找img.jpg的图片</li></ul></li><li>上级：存储图片的位置和存储代码的文件夹在同一个文件夹里<ul><li>格式：<code>src=&quot;../img.jpg&quot;</code></li><li>含义：在.html文件所在的文件夹中找到这个文件夹的上一级文件夹，然后再上一级文件夹中找到img.jpg的图片，其中<code>../</code>代表从当前位置找到上一级文件夹</li></ul></li></ol></li><li>绝对路径赋值（了解）<br>每次从指定的盘符开始查找<ol><li>格式：<code>src=&quot;C:\Users\img.jpg&quot;</code></li><li>含义：在C盘下找到Users文件夹，在Users文件夹下找到img.jpg。</li></ol></li><li>注意点<ol><li>路径中不要出现中文字符，否则可能出现未知问题</li><li>如果通过相对路径来指定，那么不能跨盘符</li><li>在企业开发中如果需要编写路径，统一使用反斜杠<code>/</code>，不要用正斜杠，因为将来在我们开发的程序可能会部署到其他操作系统的服务器上，在其他操作系统中路径都是<code>/</code> 。</li><li>在企业开发中，一般情况下不使用绝对路径，因为可移植性差。</li></ol></li></ul></li></ul></li><li><p>br标签</p><ul><li>作用：换行</li><li>格式：<code>&lt;br&gt;</code></li><li>注意点<ul><li>多个br标签可以连续使用，使用多少个br标签就会换多少行</li><li>由于HTML的作用是用来给文本添加语义的，br标签的语义是不另起一个段落换行，也就是在段落内换行，而在企业开发中一般情况下需要换行都是因为需要另起一个段落，所以在企业开发中很少使用br标签。</li><li>换行还可以使用<code>&lt;p&gt;&lt;/p&gt;</code></li></ul></li></ul></li><li><p>a标签</p><ul><li><p>作用：控制页面与页面之间的跳转</p></li><li><p>格式：<code>&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt;需要展现给用户看的内容&lt;/a&gt;</code></p></li><li><p>属性</p><ul><li><strong>target</strong>：专门用于控制如何跳转<ol><li><strong>_self</strong>：在当前选项卡中跳转，默认为_self。</li><li><strong>_blank</strong>：在新的选项卡中跳转，也就是新建页面跳转。</li></ol></li><li><strong>title</strong>：鼠标悬停时显示的提示文本</li></ul></li><li><p>注意点</p><ul><li>a标签不仅可以让文字可以点击，也可以让图片，例如<code>&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt; &lt;img src=&quot; &quot;&gt; &lt;/a&gt;</code></li><li>一个a标签必须有一个href属性，否则a标签不知道要跳转到什么界面</li><li>如果通过a标签的href属性指定一个URL地址，那么必须在地址前面加上<strong>http://<strong>或</strong>https://</strong>。</li><li>a标签的href属性既可以指定网页地址，也可以指定本地地址。</li></ul></li><li><p>拓展</p><ul><li><p>假链接</p><ol><li>作用：点击后不会跳转</li><li>意义：在企业开发前期，其他页面还没有写出来，那么我们不知道要跳转到什么地方，所以使用假链接来代替。</li><li>格式：<code>#</code>与<code>javascript</code><ul><li>区别：<code>#</code>的假链接会自动返回网页的顶部，<code>javascript</code>则不会。</li><li>制作返回顶部的功能，可以使用<code>#</code> 。</li></ul></li></ol></li><li><p>锚点</p><ol><li><p>作用：在当前页面跳转</p></li><li><p>格式：<code>&lt;a href=&quot;#id名称&quot;跳转的地方&gt;&lt;/a&gt;</code></p><p>​    <code>&lt;h2 id=&quot;名称&quot;地方&gt;&lt;/h2&gt;</code></p></li><li><p>注意点</p><ul><li>没有过渡动画，立即跳转。</li><li>a标签除了可以跳转到当前界面的指定位置，也可以跳转到其他界面的指定位置。</li></ul></li></ol></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"百度"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript"</span>&gt;</span>原地不动<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#center"</span>&gt;</span>跳转到中部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span>我是中部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"锚点测试.html#ceshi"</span>&gt;</span>跳转到锚点测试界面的指定位置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>bace标签</p><ul><li>作用：专门用于统一制定当前网页中所有的超链接(a标签)需要如何跳转</li><li>注意点<ul><li>base标签必须写在head标签的开始标签和结束标签之间</li><li>如果同时在 base 标签与 a 标签中制定了 target ，那么浏览器会优先按照 a 标签中的来执行</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>bace标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="列表标签"><a class="markdownIt-Anchor" href="#列表标签"></a> 列表标签</h1><ul><li><p>无序列表（unordered list）</p><ul><li><p>作用：给一堆数据添加列表语义，所有数据没有先后之分。</p></li><li><p>格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>需要显示的条目内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">li是英文list(列表) item(条目)的缩写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意点</p><ul><li>ul 标签是用来添加语义的，而不是添加小圆圈。</li><li>ul 标签和 li 标签是一个整体（组合），一般成对出现，不会单个出现。</li><li>由于是一个组合，所以 ul 标签中不推荐包含其他标签（ li 标签里可以放其他标签）。</li></ul></li><li><p>应用场景：新闻列表、商品列表、导航条</p></li></ul></li></ul><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础知识&quot;&gt;&lt;/a&gt; 基础知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;浏览器访问网页原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们利用浏览器访问网页时，其实是有真实的物理文件传输，浏览器会先将网页上的内容缓存到本地文件夹中，然后再渲染出来呈现给用户看。&lt;/li&gt;
&lt;li&gt;平时我们在上网时会发现第二次访问比第一次访问快，这是因为第一次访问已经将这个网页上的内容缓存到了本地。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程知识" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/16/hello-world/"/>
    <id>http://yoursite.com/2018/06/16/hello-world/</id>
    <published>2018-06-15T16:03:53.627Z</published>
    <updated>2018-06-16T15:09:35.888Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="初始页面" scheme="http://yoursite.com/categories/%E5%88%9D%E5%A7%8B%E9%A1%B5%E9%9D%A2/"/>
    
    
  </entry>
  
</feed>
