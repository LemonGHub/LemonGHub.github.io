<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[操作系统期末复习]]></title>
    <url>%2F2018%2F06%2F20%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[简答题1.操作系统的主要功能（5点） 根据课本：1. 进程、线程与作业，2. 中断与处理器调度，2. 互斥、同步与通信，3. 死锁与饥饿，4.存储管理，5. 文件系统，6.设备与输入输出管理 根据百度：处理器管理、存储器管理、设备管理、文件管理、作业管理（来自百度百科） 2.什么是死锁？(P146) 死锁产生的必要条件有哪些?（P147） 死锁：一组进程中的每个进程均等待此组进程中其他进程所占有的、因而永远无法继续向前推进，这种现象称为进程死锁，简称死锁。 死锁的必要条件：1. 资源独占，2. 不可剥夺，3. 保持申请，4.循环等待(注意: 当且仅当4个条件同时满足时，死锁才会发生) 3. 进程有哪几种状态，画出进程的状态转换图（P28~P29图2-3） 3种状态：运行态，就绪态，等待态 转换图如下 4. 进程与程序的联系与区别（P34 2.2.9） 联系 程序是构成进程的组成部分之一，一个进程存在的目的就是执行其所对应的程序。如果没有程序，进程就失去了其存在的意义。 区别 程序是静态的，而进程则是动态的。 程序可以写在纸上或在某种存储介质上长期保存，而进程具有生命周期，创建后存在，撤销后消亡。 一个程序可以对应多个进程，但是一个进程只能对用一个程序。 5. 段式存储与页式存储的管理的区别（P187） 分页和分段都采用离散分配方式，但两者有显著的差别。(1) 页是信息的物理单位．分页是系统的需要．是为了提高内存的利用率；段是信息的逻辑单位．目的在于更好地满足用户的需要(2) 页的大小固定。由系统确定．一个系统只能有一种大小的页面：段的长度不固定。决定于用户的程序。(3) 分页的作业地址空间是—维的．单一的线性地址空间；分段的作业地址空间是二维的。—个地址包括段号和段内地址。 计算题1. 处理机调度算法(FCFS、SJF、HRN、RR)（P61 - P66） 掌握四个算法的平均周转时间与平均带权周转时间的计算，要画甘特图 先到先服务算法(First-Come First Served,FCFS)——作业/进程 按照进程申请CPU的次序，即进入就绪状态的次序来调度。非抢占型，有利于CPU繁忙型作业，对I/O繁忙型作业不利。 优点：公平，不会出现饿死的情况。 缺点：短进程（线程）等待时间长，从而导致平均等待时间较长。 例：有如下CPU阵发进程，时间单位为毫秒。假定进程到达次序为P1，P2，P3，CPU调度状况可用Gantt图表示，如下图所示。 先到先服务算法调度性能指标 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 27 0 27 27 1 P2 1 3 27 30 29 9.67 P3 2 5 30 35 33 6.6 平均周转时间=29.67ms,平均带权周转时间=5.76ms。 短作业优先算法（Shortest-Job-First，SJF）——作业 （非抢占式）按照CPU阵发时间递增的次序调度。在到达的作业中挑选所需运行时间（估计值）最短的作业进入主存先运行。 优点：其平均周转（等待）时间最短，易证。 缺点：不公平性，一个较长的就绪任务可能由于短任务的不断到达而长期得不到运行机会，甚至被饿死。 例：如下进程集合以及CPU阵发时间，采用SJF算法，Gantt图如下所示。 最短作业优先算法调度性能指标 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 12 15 27 27 2.25 P2 0 5 3 8 8 1.6 P3 0 7 8 15 15 2.14 P4 0 3 0 3 3 1 平均周转时间=13.25ms,平均带权等待时间=1.75ms。 最高响应比优先算法 （Highest-Response-Ration-Next，HRN） （非抢占式）最高响应比优先算法是FCFS算法和SJF算法的折中，响应比计算公式如下： 其中RR——响应比，BT——CPU阵发时间，WT——等待时间=调度时间-到达时间。 按照高响应比优先的原则，在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比，然后选择响应比值最大的作业投入运行。 对于同时到达的任务，处理时间短的将被优先调度，处理时间较长的作业将随其等待时间的增加而动态提升其响应比，因而不会出现饥饿现象。 例：习题P.80 35题 循环轮转算法（Round-Robin，RR） ——系统为每一个进程规定一个时间片(time slice)，所有进程按照其时间片的长短轮流地运行。即每当处理机空闲时选择就绪队列头部的进程使其投入运行，同时分给它一个时间片，当此时间片用完时，如果此进程既未结束，其CPU阵发也未因某种原因而等待，则抢占此进程所占有的处理机，将其排在就绪队列的尾部，并选择就绪队列中对头的进程运行。 ①基本轮转：分给所有进程时间片的长度是相同的，且不变的。 若不考虑I/O等待，系统中所有进程以基本均等的速度向前推进。 ②改进轮转：分给不同进程的时间片的长度是不同的，而且（或者）是可变的。系统可以根据不同进程的不同特性为其动态地分配不同长度的时间片，以便达到更灵活的调度效果。 需认真考虑时间片长度： 若过长，则影响系统的响应速度； 若过短，则会频繁发生进程切换，增加系统开销。通常，时间片长度为几十毫秒至几百毫秒。 循环轮转算法特别适用于分时系统，具有公平、响应及时等特点。 调度时机：①时间片用完；②进程本身结束。 例：如下进程集合以及CPU阵发时间，采用基本轮转算法，时间片长度为2ms，Gantt图如下所示。 循环轮转算法调度性能指标 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 12 0 26 26 2.17 P2 0 4 2 12 12 3 P3 0 7 4 22 22 3.14 P4 0 3 6 15 15 5 平均周转时间=18.75ms，平均带权周转时间=3.33ms。 2. 实时调度算法（EDF、RMS） 需用公式进行判断，所需表格会提供 最早截止期优先调度(Earliest-Deadline-First,EDF) 最早截止期优先调度(Earliest-Deadline-First,EDF)优先选择完成截止期最早的实时任务。对于新到达的实时任务，如果其完成截止期先于正在运行任务的完成截止期，则重新分派处理机，即抢占。可证，对EDF算法，公式 是实时任务可调度的充分条件。 例：表3-1给出两个周期性实时任务 进程 就绪时间 处理时间 完成截止期 发生周期 A 0 10 20 20 B 0 25 50 50 按最早截止期、可抢先原则调度的结果如图3-17所示 。 速率单调调度(Rate-Monotonic Scheduling,RMS) 速率单调调度(Rate-Monotonic Scheduling,RMS)是面向周期性实时任务，属于非抢占式调度范畴。RMS将任务的周期作为调度参数，其发生频率越高，调度级别越高。已证，RMS算法可调度的条件如下： 对应不同的n值，表3-2给出了RMS算法可调度的上界值。可看出，随着任务数的增加，调度限制趋近于ln2≈0.693。 表3-2 RMS上限值 n 1 1.0 2 0.828 3 0.780 4 0.757 5 0.743 6 0.735 … … ∞ ln2≈0.693 例：考虑表3-3所示的三个周期性实时任务。 表3-3 周期性实时任务 进程 发生周期Ti 处理时间Ci A 100 20 B 150 40 C 350 100 由于 因而可知RMS能够满足所有任务的调度要求。具体调度结果如图3-18所示。 从CPU利用率来说，RMS算法不及EDF算法效率高，但具有如下优势： (1)RMS是非抢占式的，实现简单； (2)二者效率相差并不十分明显，对于具体任务集合来说，处理机利用率常可达到90%左右。 作业：P79 32题 3.银行家算法 Banker’s algorithm, E.W. Dijkstra. 进程：事先申明所需资源最大量（并不分配） 系统：对每个可满足的资源申请命令进行安全性检查。 P={p1,p2,…,pn};R={r1,r2,…,rm}; 数据结构： Available: array[1..m]of integer; //系统可用资源 Claim: array[1..n,1..m]of integer; //进程最大需求 Allocation: array[1..n,1..m]of integer; //当前分配 Need: array[1..n,1..m]of integer; //尚需资源 Request: array[1..n,1..m]of integer; //当前请求 临时变量： Work: array[1..m]of integer; Finish: array[1..n]of boolean; 设X,Y为下标1..l 的一维数组： X≤Y 等价于 任意j (1≤j≤l), X[j]≤Y[j] X:=Y 等价于 任意j (1≤j≤l), X[j]:=Y[j] X:=c 等价于 任意j (1≤j≤l), X[j]:=c X±Y 等价于 任意j (1≤j≤l), X[j]±Y[j] 银行家算法——资源分配算法 银行家算法——安全性检查算法 例：设系统中有三个资源类{A,B,C}。R={A(10),B(5),C(7)}；P={p0,p1,p2,p3,p4}。 安全进程序列：&lt;p1,p3,p4,p2,p0&gt; p1请求：Request[1]=(1,0,2),假定分配： 安全进程序列：&lt;p1,p3,p4,p2,p0&gt; 若在上面新的状态下: p4请求：Request[4]=(3,3,0), 不能满足，等待； p0请求：Request[0]=(0,2,0), 不安全，等待。 例：银行家算法的保守性。R={A,B}, 申请a, b; 释放a, bP={p1,p2}, p1: a b a b; p2:b b b a b a ,假定某时刻系统状态如下: Request[2]=(0,1), 该请求Request[2]≤Need[2]且Request[2]≤Avaiable,假定分配。 Request[2]=(0,1), 不安全，取消分配（分配不导致死锁，如p2(b),p1(b),p1(a),p1(b),p2(b),p2(a),p2(b),p2(a)） 。 结论： Remarks1:银行家算法要求条件：进程所需资源最大量, 这个信息对于充要性分析是不够的。 Remarks2:假设：进程预先给出有关资源的命令序列，则可以给出死锁避免的充要性算法，复杂度（NP Complete)。 Remarks3:预先给出进程有关资源的命令序列是困难的(程序的分支和循环）。 4. 信号灯与PV操作的应用例4.2：生产者-消费者问题(producers and consumers problem)。假设某工厂一生产线上有一只用来装物品的箱子，其中有k个位置(k≥1)，每个位置可容纳一件物品，如图4-6所示。又设有两组人，分别为生产者和消费者，其活动分别为： 分析：●当箱子已满时，生产者应等待于①处，待消费者执行到④处再将其唤醒；●当箱子已空时，消费者应等待于③处，待生产者执行到②处时将其唤醒。●箱子中的位置相当于生产者的资源，用信号灯变量S1表示，其初值为k，即初始时有k个空位置；●物品相当于消费者的资源，用信号灯变量S2 表示，其初值为0，即初始时有0件物品。●缓冲区首尾相连成环形如图4-7所示，in为放入指针，out为取出指针。●信号灯mutex用于进程对共享变量buffer和in，out的互斥。 例4.3：读者-写者问题(readers and writers problem)。设有一组共享数据DB和两组并发进程，一组进程只对此数据进行读操作，另一组进程可对此组数据执行写操作(当然同时也可执行读操作)。如图4-8所示，前一组进程称作读者，后一组进程称作写者。为了保证共享数据的完整性，要求：(1)多个读者的操作可同时进行；(2)多个写者的操作不可同时进行；(3)任何读者与写者的操作不可同时进行。 分析：●变量r_w_w用来保证读者与写者之间的互斥以及写者与写者之间的互斥；●变量readCount用来记录读者的数目；●变量mutex用来实现读者对于变量readCount访问的互斥。 例4.4：3台打印机的管理。设有3台类型相同的打印机，其编号分别为1、2、3，试编写一个申请函数require和一个释放函数return。当有打印机空闲时，返回分得的打印机编号，当无打印机空闲时则等待，被唤醒后返回分得的打印机的编号。retrun用于释放制定编号的打印机，当有申请者等待时就将其一唤醒。 5. 页式段式存储管理计算 具体戳书上 P181- P193 或 课件第六章，例题为P225 25、26 以下提供置换算法内容，相应例题为P224 17 置换算法(replacement algorithm) 用于：页淘汰、段淘汰、快表淘汰。 Objective: lowest page-fault rate. 例：有如下页面访问序列： 6, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 6, 0, 1假定内存为该进程分配3个物理页架，开始时内存页架为空。 (1)最佳淘汰算法(OPT–optimal) 淘汰将来最长时间以后才用到的。 效率最高，not feasible。 缺页故障次数为9。 (2)先进先出(FIFO) 淘汰最先调入的。 实现：队列，将所有页面按照进入内存的次序排成一个队列，当一个页面由外存调入内存时排入队尾，调入时间最早的页面被淘汰。 依据: 先进入的可能已经使用完毕。 negative case: 有些代码和数据可能整个程序运行中用到。 缺页故障次数为15。 FIFO页面淘汰算法会产生异常现象（Belady现象），即：当分配给进程的物理页面数增加时，缺页次数反而增加，称之为Belady异常。 (3)使用过最久的先淘汰（LRU） 淘汰最近一次访问距当前时间最长的。 缺页故障次数为12。 实现：stack。访问时，其对应的页面号由栈内取出送入栈顶。 淘汰时，取栈底页面号对应的页面。 6. 磁盘的物理特性所有扇区以一维的形式加以编号，编号顺序为0,1,…,l×m×n-1，称为块号。 一维地址与三维地址的对应关系? 编址方法：使相邻块物理上最近，提高访问速度。扇区号先变化，其次是盘面号，最后是柱面号。 例：柱面号为0～1，盘面号为0～2，扇区号为0～2。设柱面数为l，盘面数为m，扇区数为n；又设柱面号为i，盘面号为j，扇区号为k，块号为b。则l=2; m=3; n=3 三维地址→一维地址： b=i×m×n+j×n+k =((i×m)+j)×n+k 一维地址→三维地址： i=b÷(m×n) j=b mod (m×n) ÷n k=b mod (m×n) mod n 7. 设备调度 磁盘输入输出参数 三个因素：寻道时间、旋转延迟、传输时间。 (1)寻道时间Ts=m×n+s n为跨越磁道数，m为跨越一个磁道所用时间，s为启动时间。 (2)旋转延迟Tr=1/(2r) r为磁盘转速，这里是平均旋转延迟。 (3)传输时间Tt=b/(rN) b为读写字节数，r为磁盘转速，N为一条磁道上的字节数。 (4)访问时间Ta=Ts+Tr+Tt=m×n+s+1/(2r)+b/(rN) 访问磁盘通常是以扇区(块)为单位的，令M为一个磁道上的扇区个数，则一个扇区的访问时间为：Ta=Ts+Tr+Tt=m×n+s+1/(2r)+1/(rM) 磁盘引臂调度算法优化服务顺序考虑因素 ●公平性 防止饿死 ●高效性 减少磁盘引臂移动量 (1)先到先服务（FCFS） 请求序列：130，42，180，15，108，68，97 移动量: (130-53)+(130-42)+(180-42)+(180-15)+(108-15)+(108-68)+(97-68)=630 (2)最短寻找时间优先（SSTF） 请求序列：130，42，180，15，108，68，97 移动量: (53-42)+(180-42)+(180-15)=314 (3)电梯算法 LOOK 请求序列：130，42，180，15，108，68，97 LOOK移动量: (53-15)+(180-15)=203 (4) 循环扫描 C-SCAN（C-LOOK） 请求序列：130，42，180，15，108，68，97 特点：所有磁道的最长等待时间相同 例题：一个只有单一移动磁头的磁盘，磁道由外向内编号为0、1、2……、199，磁头移动一个磁道所需时间为1ms，每个磁道有100个扇区，磁盘转速为6000rpm。采用循环Look引臂调度算法，当前引臂位置处于第100磁道，当前移动方向为由外向内，并规定引臂向内扫描时为路径请求服务。对于磁道请求120、85、70、30，每个请求访问对应磁道上的一个扇区，试问：(1)给出引臂移动序列，计算引臂移动量和寻道时间，忽略启动时间;(2)计算平均旋转延迟时间；(3)计算传输时间；(4)计算所有访问处理时间。 解答： (1)磁盘引臂移动序列为100、120、30、70、85，跨越磁道数为：20+90+40+15=165。共需寻道时间165×1ms=165ms。 (2)1次访问磁盘的旋转延迟为Tr=1/(2r)=1/(2×6000rpm)=1/(2×100rps)=5ms,4次访问磁盘的旋转延迟为4×5ms=20ms。 (3)1次访问磁盘的传输时间为Tt=1/(rM)=1/(6000rpm×100)=1/(100rps×100)=0.1ms,4次访问磁盘的传输时间为4×0.1ms=0.4ms。 (4)所有访问处理时间为：165+20+0.4=185.4ms。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web编程技术期末复习]]></title>
    <url>%2F2018%2F06%2F17%2FWeb%E7%BC%96%E7%A8%8B%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[jdbc与jsp全称 jdbc 全称为 Java Database Connectivity jsp 全称为 Java Server Pages, Java服务端网页 Web服务器端开发技术 CGI、PHP、ASP、JSP 常用Web服务器 IIS、Apache、Tomcat、BEA WebLogic、JRun、Jboss服务器、IBM公司的WebSphere服务器 Web编辑工具 FrontPage、Dreamweaver、EditPlus、UltraEdit、Eclipse JSP内置对象 out、request、response、session、application、exception 数据库的四要素 驱动、URL、用户名、密码 静态包含和动态包含的区别 include指令 功能：指定在JSP文件中包含的一个静态的文件，即在JSP文件被编译时需要插入的文本或代码。 语法：&lt;%@ include file= “文件名称”%&gt; 注意：当使用include指令时，包含文件是静态包含，即这个被包含的文件将被插入到JSP文件中去。所包含的文件可以是JSP文件、HTML文件、文本文件、甚至一段Java代码。但是在所包含的文件中不能使用“&lt; html &gt; &lt; /html &gt;”，“ &lt; body &gt; &lt; /body &gt;”标记，因为这将会影响到原有的JSP文件中所使用的相同标记。如果所包含的是一个JSP文件，则该文件将会执行。 include操作 功能：在JSP文件中包含一个静态或动态文件。 语法：&lt; jsp:include page=”relativeURL | &lt;%= expression%&gt;” /&gt; 属性说明：page=”relativeURL | &lt;%= expression %&gt;” ： 属性值指明所包含文件的相对路径，或者由expression所代表的相对路径的表达式。 注意：&lt; jsp:include &gt;动作标签可以包含静态文件或者动态文件。但二者有很大的不同。若包含静态文件，被包含文件的内容将直接嵌入到JSP文件中存放&lt; jsp:include &gt;指令的位置，而且当静态文件改变时，必须将JSP文件重新保存（重新转译），然后才能访问到变化了的文件。如果包含的文件是动态文件，那么将把动态执行的结果传回包含它的JSP页面中。若动态文件被修改，则重新运行JSP文件就会同步发生变化。而且书写该标签时，“jsp”、“：”以及“include”三者之间不要留有空格，否则会出错。 服务器跳转与客户端跳转的区别 JSP开发环境搭载步骤 具体戳 模块1第一章引论 - 1.5开发环境搭建 1、安装JDK 添加环境变量。 2、安装Tomcat在IE中输入 http://127.0.0.1:8080 或 http://本机ip:8080 或 http://localhost:8080 。检验是否启动成功出现猫，若此时浏览器中显示Tomcat的欢迎和管理画面，即表示服务器安装和启动成功。 3、安装MySQL。 4、安装Eclipse，设置Eclipse中的jdk和tomcat环境。 5、关于Tomcat服务器虚拟目录的配置打开Tomcat的安装目录，进入conf/server.xml，在&lt; /host &gt;上方加入&lt; Context path=”/虚拟目录名” docBase=”虚拟目录路径”/&gt;。 JSP 内置对象的作用范围 request 将属性保存在一次请求范围内，前提是必须使用服务器跳转&lt; jsp:forward &gt; session session对象在第一个jsp页面被装载时自动创建，完成会话期管理。当用户第一次登录网站时，服务器端的JSP引擎将为该用户生成一个独一无二的session对象，用以记录该用户的个人信息。一旦该用户退出网站，那么属于他的session对象将会被注销。session对象可以绑定若干个人信息或者Java对象。如果不同session对象内部定义了相同的变量名，那么这些同名变量是不会相互干扰的。需要说明的是，session对象中所保存和检索的信息不能是基本数据类型，必须是Java语言中相应的Object对象。 application application对象与session对象相似，当一个用户首次访问服务器上的一个JSP页面时，服务器的JSP引擎就为该用户创建了application对象，当客户在服务器的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session对象不同的是，所有用户的application对象都是同一个，即所有用户共享这个application对象。application对象由服务器创建，也由服务器自动清除，不能被用户创建和清除。下面介绍application对象中的方法。 param操作 功能：为其他标签提供附加信息。 语法：&lt;jsp:param name=”参数名字” value=”参数的值”/&gt; 注意：该标签必须配合&lt; jsp:include &gt;、&lt; jsp:forward &gt;、&lt; jsp:plugin &gt;动作标签一起使用。当与&lt; jsp: include &gt;标签一起使用时，可以将param组件中的参数值传递到include指令要包含的文件中去。 JDBC 应用程序接口 书本P113 java.sql.DriverManager：处理驱动的调入并且对产生新的数据库连接提供支持。 java.sql.Connection：代表对特定数据库的连接。 java.sql.Statement：代表一个特定的容器，对一个特定的数据库执行SQL语句。 java.sql.ResultSet：控制对一个特定语句的行数据的存储。 课件模块3第7章 DriverManager类：依据数据库的不同，管理JDBC驱动。 Connection接口：负责连接数据库并担任传送数据的任务。 Statement接口：由Connection产生，负责执行SQL语句。 ResultSet接口：负责保存Statement执行后所产生的查询结果。 ———补充内容——— 在JSP中如果要应用JSP提供的JavaBean的标签操作简单类，则此类必须满足如下的开发要求： 所有的类必须放在一个包中，在Web中没有包的类是不存在的。 所有的类必须声明为public class，才能被外部所访问。–&gt;类名称与文件名一致。 类中所有的属性必须封装，即使用private声明。 封装的属性如果需要被外部所操作，则必须编写对应的setter、getter方法。 一个JavaBean中至少存在一个无参数构造方法，此方法为JSP中的标签所使用。 注：如果在一个类中只包含了属性、setter、getter方法，那么这种类就称为简单JavaBean POJO（Plain Ordinary Java Object）简单Java对象 VO(Value Object)与简单Java对象对应，专门用于传递值的操作上。 TO(Transfers Object)传输对象 Servlet可以用来提交表单。 第一次访问比第二次访问慢，因为需要编译。 如何控制年龄的范围（1-150）？——在客户端进行控制。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Web 编程技术]]></title>
    <url>%2F2018%2F06%2F17%2FJava%20Web%20%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[Java Web 编程技术 基础知识笔记 一、jsp技术 1. JSP基本语法 1.1. JSP Scriptlets 语法格式：&lt;% java 代码（变量、方法、表达式等）%&gt; 注意点： 可以进行属性的定义，也可以输出内容，==但不可以进行方法的定义==。 1.2. JSP 声明语句 语法格式：&lt;@! 定义的变量或方法等 %&gt; 注意点： 可以进行属性的定义，以及方法的定义，==但不可以进出输出内容==。 1.3. JSP表达式 语法格式：&lt;%= expression %&gt; 注意点： &lt;%= 和 %&gt; 标记之间插入的是表达式，不能插入语句 表达式或变量后面不能有分号 1.4. JSP注释 语法格式：HTML注释：&lt;!-- 注释信息 --&gt;，JSP注释：&lt;%-- 注释信息 --&gt; 注意点： HTML注释可通过浏览器查询源代码看到，JSP注释则不会。 2. JSP指令 2.1 . page指令 对页面的某些特性进行描述 语法格式：&lt;%@ page 属性名1=&quot;&quot;... %&gt; 常见属性：language、import、session、isErrorPage、errorPage、contentType、pageEnCoding 注意点： 除了import 属性以外，其他属性均只能出现一次 page 指令的属性名称区分大小写 page指令对整个页面有效，与其书写位置无关，一般写与最前面。 2.2 . include指令 JSP页面静态包含一个文件 语法格式：&lt;%@ include file=&quot;被包含的文件地址&quot; %&gt; 注意点： include 指令只有 file 一个属性。 插入文件的路径一般使用相对路径。 引入的文件必须遵循 JSP 语法，内容可包含静态HTML、JSP页面所具有的一切内容。 3. JSP 隐式对象 为了便于一些对象的重复使用，JSP 提供9个隐式（内置）对象，可直接在 JSP 页面中使用 3.1 . out对象 用于页面输出 语法格式：out.println(&quot;...&quot;); 注意点： 通过out隐式对象写入数据相当于将数据插入到 JspWriter 对象的缓冲区中，只有调用了 ServletResponse.getWriter() 方法，缓冲区中的数据才能真正的写入到Servlet 引擎所提供的缓冲区。 如需立即写入缓冲区，可通过 page 指令 将 buffer 属性设为0kb​]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础知识]]></title>
    <url>%2F2018%2F06%2F16%2FHTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[基础知识 浏览器访问网页原理 当我们利用浏览器访问网页时，其实是有真实的物理文件传输，浏览器会先将网页上的内容缓存到本地文件夹中，然后再渲染出来呈现给用户看。 平时我们在上网时会发现第二次访问比第一次访问快，这是因为第一次访问已经将这个网页上的内容缓存到了本地。 浏览器请求数据过程 12用户端--&gt;服务器: 发送“请求报文”服务器--&gt;用户端: 发送“响应报文” 请求报文 请求行+请求头+空行+请求体 响应报文 响应行+响应头+响应体 URL 我们在浏览器的地址中输入的这个地址就是一个URL。 URL格式 http://127.0.0.1/index.htmlhttp://127.0.0.1:80/index.html(完整格式) URL拆分 URL协议类型：http:// 服务器地址：127.0.0.1 服务器端口号： :80 访问的资源名称：index.html 各部分作用 IP地址和端口号 IP地址相当于现实生活中的地址，例如：福建省莆田市仙游县 端口号相当于我们现实生活中的的门牌号码，例如：9栋909室 index.html作用 当我们通过IP地址和端口号寻找到对应的服务器之后，需要通过资源名称告诉服务器，我们要获取服务器上的哪个资源。 HTTP协议 HTTP：超文本传输协议 协议 在现实生活中有很多协议，例如租房协议，无论什么协议，他们都是用来规范约束某一类事物 HTTP协议是规范约束浏览器和服务器之间如何沟通。 认识HTML HTML作用 HTML只有一个作用，就是专门用于描述文本语义的，也就是说我们可以利用HTML来告诉浏览器哪些是标题，哪些是段落 这些用于描述其他文本语义的文本，我们称之为标签，并且这些用于描述其他文本语义的标签在浏览器中不会被显示出来 HTML的整体框架 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; &lt;&gt;:开始标签&lt;/&gt;:结束标签 \标签 作用：用于告诉浏览器这是一个网页，也就是说告诉浏览器我是一个HTML文档。 注意点：其他所有标签都必须写在html标签里面，也就是写在html开始标签与结束标签里面。 \标签 作用 用于给网站添加一些配置信息 例如 指定网站的标题/指定网站小图片 添加网站的SEO相关的信息（指定网站的关键字/指定网站的描述信息） 外挂一些外部的CSS/JS文件 添加一些浏览器适配的的相关内容 注意点 一般情况下，写在head标签里的内容不会显示给用户看。 \标签 作用 专门用于指定网站的标题，并且这个指定的标题将来还会作为用户保存网站的默认标题 注意点 title标签必须写在head标签里 \标签 作用 专门用于定义HTML文件中能显示给用户查看的内容(文字/图片/音频/视频) 注意点 在其他地方写有时也可以看到，但最好不要这样做 一对html标签中，只能有一对body标签。 head内部标签 meta标签 作用：指定当前网页的字符集 为什么会有乱码现象？就是因为我们在编写网页时没有指定字符集 如何解决乱码现象？在head标签中添加&lt;meta charset=&quot;GBK&quot; /&gt; GBK/GB2312和UTF-8区别 GBK/GB2312里面存储的字符比较少，仅仅存储了汉字和一些常用外文，体积比较小 UTF-8里面存储世界上所有的文字，体积比较大。 注意点 在HTML文件中指定的字符集必须和保存这个文件的字符集一致，否则还是会出现乱码。 标签的分类 单标签 只有开始标签没有结束标签，也就是由一个&lt;&gt;组成的 双标签 有开始标签和结束标签，也就是由一个&lt;&gt;和一个&lt;/&gt;组成的 DTD文档声明 由来：由于HTML有很多版本的规范，为了让浏览器能正确的渲染我们的网页，我们需要在HTML第一行告诉浏览器HTML文档使用哪个规范 HTML5文档声明规范(向下兼容) 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 注意点 任何一个标准的HTML网页，第一行一定是DTD文档声明 DTD文档声明不区分大小写\&lt;!DOCTYPE html&gt; \&lt;!doctype html&gt; DTD文档声明不是一个标签 浏览器并不完全依赖于DTD文档，它有自己的一套机制。 没有DTD文档声明的网页也可以正常运行，但为了遵守规定以及减少一些不必要的麻烦，也要在第一行加上声明。 .htm和 .html扩展名区别 DOS操作系统(win95/win98)下只支持长度为3位的扩展名，所以是htm 后续Windos系统中可以大于3位，所以可使用html。 htm是为了兼容过去的DOS操作系统 基础标签 H标签 作用：用于给文本添加标题语义 格式：&lt;h1&gt;xxxxxx&lt;/h1&gt; 注意点 H标签是用来给文本添加标题语义的，而不是用来修改文本的样式的 H标签一共有6个，从H1~H6，超过6个无效。 123456&lt;h1&gt;h1&lt;/h1&gt;&lt;h2&gt;h2&lt;/h2&gt;&lt;h3&gt;h3&lt;/h3&gt;&lt;h4&gt;h4&lt;/h4&gt;&lt;h5&gt;h5&lt;/h5&gt;&lt;h6&gt;h6&lt;/h6&gt; 被H系列标签包裹的内容会独占一行，H1最大，H6最小 在企业开发中，一定要慎用H系列的标签，特别是H1标签，一般一个界面只能出现一个H1标签（和SEO有关） P标签 作用：告诉浏览器哪些文字是一个段落 格式：&lt;p&gt;一个段落&lt;/p&gt; 注意点 在浏览器中单独占一行 Hr标签 作用：在浏览器上显示一条分割线 格式：&lt;hr /&gt; 注意点 在浏览器中独占一行 &lt;hr&gt;或&lt;hr /&gt;均可，前者为HTML规范，后者为XHTML规范 在HTML5中，写不写/均可 注释 作用：让程序具有可读性 格式：&lt;!--被注释的内容--&gt; 注意点： 被注释的内容不会再浏览器中显示 img标签 作用：告诉浏览器我们需要显示一张图片 格式：img src=&quot;&quot; src是英文source的缩写，用来告诉img标签需要显示的图片名称 1&lt;img src="img.jpg"&gt; 注意点 和H系列标签/P标签/Hr标签不一样，img标签不会独占一行 width：宽度 height：高度 用来设置显示图片的宽高 如果没有指定，则会按照默认的宽高显示 如果只指定一个，则另一个等比进行缩放 title：当鼠标悬停在图片上时，弹出的描述框 alt：altermate(交换/替换)的缩写，当图片找不到时显示的内容 1&lt;img src="img.jpg" width="100" height="100" title="图片内容" alt="图片消失了"&gt; 路径问题给src属性赋值有两种方式 相对路径赋值每次从.html文件所在的文件夹开始查找 同级：图片与.html文件存储在同一个文件夹 格式：src=&quot;img.jpg&quot; 含义：在html文件所在的文件夹中查找名称叫做img.jpg的图片 下级：存储图片的文件夹和.html文件在同一个文件夹 格式：src=&quot;image/img.jpg&quot; 含义：在html文件所在的文件夹中查找image文件夹，在image文件夹里查找img.jpg的图片 上级：存储图片的位置和存储代码的文件夹在同一个文件夹里 格式：src=&quot;../img.jpg&quot; 含义：在.html文件所在的文件夹中找到这个文件夹的上一级文件夹，然后再上一级文件夹中找到img.jpg的图片，其中../代表从当前位置找到上一级文件夹 绝对路径赋值（了解）每次从指定的盘符开始查找 格式：src=&quot;C:\Users\img.jpg&quot; 含义：在C盘下找到Users文件夹，在Users文件夹下找到img.jpg。 注意点 路径中不要出现中文字符，否则可能出现未知问题 如果通过相对路径来指定，那么不能跨盘符 在企业开发中如果需要编写路径，统一使用反斜杠/，不要用正斜杠，因为将来在我们开发的程序可能会部署到其他操作系统的服务器上，在其他操作系统中路径都是/ 。 在企业开发中，一般情况下不使用绝对路径，因为可移植性差。 br标签 作用：换行 格式：&lt;br&gt; 注意点 多个br标签可以连续使用，使用多少个br标签就会换多少行 由于HTML的作用是用来给文本添加语义的，br标签的语义是不另起一个段落换行，也就是在段落内换行，而在企业开发中一般情况下需要换行都是因为需要另起一个段落，所以在企业开发中很少使用br标签。 换行还可以使用&lt;p&gt;&lt;/p&gt; a标签 作用：控制页面与页面之间的跳转 格式：&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt;需要展现给用户看的内容&lt;/a&gt; 属性 target：专门用于控制如何跳转 _self：在当前选项卡中跳转，默认为_self。 _blank：在新的选项卡中跳转，也就是新建页面跳转。 title：鼠标悬停时显示的提示文本 注意点 a标签不仅可以让文字可以点击，也可以让图片，例如&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt; &lt;img src=&quot; &quot;&gt; &lt;/a&gt; 一个a标签必须有一个href属性，否则a标签不知道要跳转到什么界面 如果通过a标签的href属性指定一个URL地址，那么必须在地址前面加上http://或https://。 a标签的href属性既可以指定网页地址，也可以指定本地地址。 拓展 假链接 作用：点击后不会跳转 意义：在企业开发前期，其他页面还没有写出来，那么我们不知道要跳转到什么地方，所以使用假链接来代替。 格式：#与javascript 区别：#的假链接会自动返回网页的顶部，javascript则不会。 制作返回顶部的功能，可以使用# 。 锚点 作用：在当前页面跳转 格式：&lt;a href=&quot;#id名称&quot;跳转的地方&gt;&lt;/a&gt; ​ &lt;h2 id=&quot;名称&quot;地方&gt;&lt;/h2&gt; 注意点 没有过渡动画，立即跳转。 a标签除了可以跳转到当前界面的指定位置，也可以跳转到其他界面的指定位置。 123456789&lt;a href="https://www.baidu.com/" target="_blank" title="百度"&gt;百度一下&lt;/a&gt;&lt;a href="#"&gt;返回顶部&lt;/a&gt;&lt;a href="javascript"&gt;原地不动&lt;/a&gt;&lt;a href="#center"&gt;跳转到中部&lt;/a&gt;&lt;h2 id="center"&gt;我是中部&lt;/h2&gt;&lt;a href="锚点测试.html#ceshi"&gt;跳转到锚点测试界面的指定位置&lt;/a&gt; bace标签 作用：专门用于统一制定当前网页中所有的超链接(a标签)需要如何跳转 注意点 base标签必须写在head标签的开始标签和结束标签之间 如果同时在 base 标签与 a 标签中制定了 target ，那么浏览器会优先按照 a 标签中的来执行 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;bace标签&lt;/title&gt; &lt;base target="_blank"&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 列表标签 无序列表（unordered list） 作用：给一堆数据添加列表语义，所有数据没有先后之分。 格式： 123456&lt;ul&gt; &lt;li&gt;需要显示的条目内容&lt;/li&gt;&lt;/ul&gt;&lt;!-- li是英文list(列表) item(条目)的缩写--&gt; 注意点 ul 标签是用来添加语义的，而不是添加小圆圈。 ul 标签和 li 标签是一个整体（组合），一般成对出现，不会单个出现。 由于是一个组合，所以 ul 标签中不推荐包含其他标签（ li 标签里可以放其他标签）。 应用场景：新闻列表、商品列表、导航条]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>初始页面</category>
      </categories>
  </entry>
</search>
