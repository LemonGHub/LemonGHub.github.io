<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Web编程技术期末复习]]></title>
    <url>%2F2018%2F06%2F17%2FWeb%E7%BC%96%E7%A8%8B%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[jdbc与jsp全称 jdbc 全称为 Java Database Connectivity jsp 全称为 Java Server Pages, Java服务端网页 Web服务器端开发技术 CGI、PHP、ASP、JSP 常用Web服务器 IIS、Apache、Tomcat、BEA WebLogic、JRun、Jboss服务器、IBM公司的WebSphere服务器 Web编辑工具 FrontPage、Dreamweaver、EditPlus、UltraEdit、Eclipse JSP内置对象 out、request、response、session、application、exception 数据库的四要素 驱动、URL、用户名、密码 静态包含和动态包含的区别 include指令 功能：指定在JSP文件中包含的一个静态的文件，即在JSP文件被编译时需要插入的文本或代码。 语法：&lt;%@ include file= “文件名称”%&gt; 注意：当使用include指令时，包含文件是静态包含，即这个被包含的文件将被插入到JSP文件中去。所包含的文件可以是JSP文件、HTML文件、文本文件、甚至一段Java代码。但是在所包含的文件中不能使用“&lt; html &gt; &lt; /html &gt;”，“ &lt; body &gt; &lt; /body &gt;”标记，因为这将会影响到原有的JSP文件中所使用的相同标记。如果所包含的是一个JSP文件，则该文件将会执行。 include操作 功能：在JSP文件中包含一个静态或动态文件。 语法：&lt; jsp:include page=”relativeURL | &lt;%= expression%&gt;” /&gt; 属性说明：page=”relativeURL | &lt;%= expression %&gt;” ： 属性值指明所包含文件的相对路径，或者由expression所代表的相对路径的表达式。 注意：&lt; jsp:include &gt;动作标签可以包含静态文件或者动态文件。但二者有很大的不同。若包含静态文件，被包含文件的内容将直接嵌入到JSP文件中存放&lt; jsp:include &gt;指令的位置，而且当静态文件改变时，必须将JSP文件重新保存（重新转译），然后才能访问到变化了的文件。如果包含的文件是动态文件，那么将把动态执行的结果传回包含它的JSP页面中。若动态文件被修改，则重新运行JSP文件就会同步发生变化。而且书写该标签时，“jsp”、“：”以及“include”三者之间不要留有空格，否则会出错。 服务器跳转与客户端跳转的区别 JSP开发环境搭载步骤 具体戳 模块1第一章引论 - 1.5开发环境搭建 JSP 内置对象的作用范围 request 将属性保存在一次请求范围内，前提是必须使用服务器跳转\jsp:forward session session对象在第一个jsp页面被装载时自动创建，完成会话期管理。当用户第一次登录网站时，服务器端的JSP引擎将为该用户生成一个独一无二的session对象，用以记录该用户的个人信息。一旦该用户退出网站，那么属于他的session对象将会被注销。session对象可以绑定若干个人信息或者Java对象。如果不同session对象内部定义了相同的变量名，那么这些同名变量是不会相互干扰的。需要说明的是，session对象中所保存和检索的信息不能是基本数据类型，必须是Java语言中相应的Object对象。 application application对象与session对象相似，当一个用户首次访问服务器上的一个JSP页面时，服务器的JSP引擎就为该用户创建了application对象，当客户在服务器的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session对象不同的是，所有用户的application对象都是同一个，即所有用户共享这个application对象。application对象由服务器创建，也由服务器自动清除，不能被用户创建和清除。下面介绍application对象中的方法。 param操作 功能：为其他标签提供附加信息。 语法：&lt;jsp:param name=”参数名字” value=”参数的值”/&gt; 注意：该标签必须配合&lt; jsp:include &gt;、&lt; jsp:forward &gt;、&lt; jsp:plugin &gt;动作标签一起使用。当与&lt; jsp: include &gt;标签一起使用时，可以将param组件中的参数值传递到include指令要包含的文件中去。 JDBC 应用程序接口 书本P113 java.sql.DriverManager：处理驱动的调入并且对产生新的数据库连接提供支持。 java.sql.Connection：代表对特定数据库的连接。 java.sql.Statement：代表一个特定的容器，对一个特定的数据库执行SQL语句。 java.sql.ResultSet：控制对一个特定语句的行数据的存储。 课件模块3第7章 DriverManager类：依据数据库的不同，管理JDBC驱动。 Connection接口：负责连接数据库并担任传送数据的任务。 Statement接口：由Connection产生，负责执行SQL语句。 ResultSet接口：负责保存Statement执行后所产生的查询结果。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Web 编程技术]]></title>
    <url>%2F2018%2F06%2F17%2FJava%20Web%20%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[Java Web 编程技术 基础知识笔记 一、jsp技术 1. JSP基本语法 1.1. JSP Scriptlets 语法格式：&lt;% java 代码（变量、方法、表达式等）%&gt; 注意点： 可以进行属性的定义，也可以输出内容，==但不可以进行方法的定义==。 1.2. JSP 声明语句 语法格式：&lt;@! 定义的变量或方法等 %&gt; 注意点： 可以进行属性的定义，以及方法的定义，==但不可以进出输出内容==。 1.3. JSP表达式 语法格式：&lt;%= expression %&gt; 注意点： &lt;%= 和 %&gt; 标记之间插入的是表达式，不能插入语句 表达式或变量后面不能有分号 1.4. JSP注释 语法格式：HTML注释：&lt;!-- 注释信息 --&gt;，JSP注释：&lt;%-- 注释信息 --&gt; 注意点： HTML注释可通过浏览器查询源代码看到，JSP注释则不会。 2. JSP指令 2.1 . page指令 对页面的某些特性进行描述 语法格式：&lt;%@ page 属性名1=&quot;&quot;... %&gt; 常见属性：language、import、session、isErrorPage、errorPage、contentType、pageEnCoding 注意点： 除了import 属性以外，其他属性均只能出现一次 page 指令的属性名称区分大小写 page指令对整个页面有效，与其书写位置无关，一般写与最前面。 2.2 . include指令 JSP页面静态包含一个文件 语法格式：&lt;%@ include file=&quot;被包含的文件地址&quot; %&gt; 注意点： include 指令只有 file 一个属性。 插入文件的路径一般使用相对路径。 引入的文件必须遵循 JSP 语法，内容可包含静态HTML、JSP页面所具有的一切内容。 3. JSP 隐式对象 为了便于一些对象的重复使用，JSP 提供9个隐式（内置）对象，可直接在 JSP 页面中使用 3.1 . out对象 用于页面输出 语法格式：out.println(&quot;...&quot;); 注意点： 通过out隐式对象写入数据相当于将数据插入到 JspWriter 对象的缓冲区中，只有调用了 ServletResponse.getWriter() 方法，缓冲区中的数据才能真正的写入到Servlet 引擎所提供的缓冲区。 如需立即写入缓冲区，可通过 page 指令 将 buffer 属性设为0kb​]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础知识]]></title>
    <url>%2F2018%2F06%2F16%2FHTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[基础知识 浏览器访问网页原理 当我们利用浏览器访问网页时，其实是有真实的物理文件传输，浏览器会先将网页上的内容缓存到本地文件夹中，然后再渲染出来呈现给用户看。 平时我们在上网时会发现第二次访问比第一次访问快，这是因为第一次访问已经将这个网页上的内容缓存到了本地。 浏览器请求数据过程 12用户端--&gt;服务器: 发送“请求报文”服务器--&gt;用户端: 发送“响应报文” 请求报文 请求行+请求头+空行+请求体 响应报文 响应行+响应头+响应体 URL 我们在浏览器的地址中输入的这个地址就是一个URL。 URL格式 http://127.0.0.1/index.htmlhttp://127.0.0.1:80/index.html(完整格式) URL拆分 URL协议类型：http:// 服务器地址：127.0.0.1 服务器端口号： :80 访问的资源名称：index.html 各部分作用 IP地址和端口号 IP地址相当于现实生活中的地址，例如：福建省莆田市仙游县 端口号相当于我们现实生活中的的门牌号码，例如：9栋909室 index.html作用 当我们通过IP地址和端口号寻找到对应的服务器之后，需要通过资源名称告诉服务器，我们要获取服务器上的哪个资源。 HTTP协议 HTTP：超文本传输协议 协议 在现实生活中有很多协议，例如租房协议，无论什么协议，他们都是用来规范约束某一类事物 HTTP协议是规范约束浏览器和服务器之间如何沟通。 认识HTML HTML作用 HTML只有一个作用，就是专门用于描述文本语义的，也就是说我们可以利用HTML来告诉浏览器哪些是标题，哪些是段落 这些用于描述其他文本语义的文本，我们称之为标签，并且这些用于描述其他文本语义的标签在浏览器中不会被显示出来 HTML的整体框架 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; &lt;&gt;:开始标签&lt;/&gt;:结束标签 \标签 作用：用于告诉浏览器这是一个网页，也就是说告诉浏览器我是一个HTML文档。 注意点：其他所有标签都必须写在html标签里面，也就是写在html开始标签与结束标签里面。 \标签 作用 用于给网站添加一些配置信息 例如 指定网站的标题/指定网站小图片 添加网站的SEO相关的信息（指定网站的关键字/指定网站的描述信息） 外挂一些外部的CSS/JS文件 添加一些浏览器适配的的相关内容 注意点 一般情况下，写在head标签里的内容不会显示给用户看。 \标签 作用 专门用于指定网站的标题，并且这个指定的标题将来还会作为用户保存网站的默认标题 注意点 title标签必须写在head标签里 \标签 作用 专门用于定义HTML文件中能显示给用户查看的内容(文字/图片/音频/视频) 注意点 在其他地方写有时也可以看到，但最好不要这样做 一对html标签中，只能有一对body标签。 head内部标签 meta标签 作用：指定当前网页的字符集 为什么会有乱码现象？就是因为我们在编写网页时没有指定字符集 如何解决乱码现象？在head标签中添加&lt;meta charset=&quot;GBK&quot; /&gt; GBK/GB2312和UTF-8区别 GBK/GB2312里面存储的字符比较少，仅仅存储了汉字和一些常用外文，体积比较小 UTF-8里面存储世界上所有的文字，体积比较大。 注意点 在HTML文件中指定的字符集必须和保存这个文件的字符集一致，否则还是会出现乱码。 标签的分类 单标签 只有开始标签没有结束标签，也就是由一个&lt;&gt;组成的 双标签 有开始标签和结束标签，也就是由一个&lt;&gt;和一个&lt;/&gt;组成的 DTD文档声明 由来：由于HTML有很多版本的规范，为了让浏览器能正确的渲染我们的网页，我们需要在HTML第一行告诉浏览器HTML文档使用哪个规范 HTML5文档声明规范(向下兼容) 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 注意点 任何一个标准的HTML网页，第一行一定是DTD文档声明 DTD文档声明不区分大小写\&lt;!DOCTYPE html&gt; \&lt;!doctype html&gt; DTD文档声明不是一个标签 浏览器并不完全依赖于DTD文档，它有自己的一套机制。 没有DTD文档声明的网页也可以正常运行，但为了遵守规定以及减少一些不必要的麻烦，也要在第一行加上声明。 .htm和 .html扩展名区别 DOS操作系统(win95/win98)下只支持长度为3位的扩展名，所以是htm 后续Windos系统中可以大于3位，所以可使用html。 htm是为了兼容过去的DOS操作系统 基础标签 H标签 作用：用于给文本添加标题语义 格式：&lt;h1&gt;xxxxxx&lt;/h1&gt; 注意点 H标签是用来给文本添加标题语义的，而不是用来修改文本的样式的 H标签一共有6个，从H1~H6，超过6个无效。 123456&lt;h1&gt;h1&lt;/h1&gt;&lt;h2&gt;h2&lt;/h2&gt;&lt;h3&gt;h3&lt;/h3&gt;&lt;h4&gt;h4&lt;/h4&gt;&lt;h5&gt;h5&lt;/h5&gt;&lt;h6&gt;h6&lt;/h6&gt; 被H系列标签包裹的内容会独占一行，H1最大，H6最小 在企业开发中，一定要慎用H系列的标签，特别是H1标签，一般一个界面只能出现一个H1标签（和SEO有关） P标签 作用：告诉浏览器哪些文字是一个段落 格式：&lt;p&gt;一个段落&lt;/p&gt; 注意点 在浏览器中单独占一行 Hr标签 作用：在浏览器上显示一条分割线 格式：&lt;hr /&gt; 注意点 在浏览器中独占一行 &lt;hr&gt;或&lt;hr /&gt;均可，前者为HTML规范，后者为XHTML规范 在HTML5中，写不写/均可 注释 作用：让程序具有可读性 格式：&lt;!--被注释的内容--&gt; 注意点： 被注释的内容不会再浏览器中显示 img标签 作用：告诉浏览器我们需要显示一张图片 格式：img src=&quot;&quot; src是英文source的缩写，用来告诉img标签需要显示的图片名称 1&lt;img src="img.jpg"&gt; 注意点 和H系列标签/P标签/Hr标签不一样，img标签不会独占一行 width：宽度 height：高度 用来设置显示图片的宽高 如果没有指定，则会按照默认的宽高显示 如果只指定一个，则另一个等比进行缩放 title：当鼠标悬停在图片上时，弹出的描述框 alt：altermate(交换/替换)的缩写，当图片找不到时显示的内容 1&lt;img src="img.jpg" width="100" height="100" title="图片内容" alt="图片消失了"&gt; 路径问题给src属性赋值有两种方式 相对路径赋值每次从.html文件所在的文件夹开始查找 同级：图片与.html文件存储在同一个文件夹 格式：src=&quot;img.jpg&quot; 含义：在html文件所在的文件夹中查找名称叫做img.jpg的图片 下级：存储图片的文件夹和.html文件在同一个文件夹 格式：src=&quot;image/img.jpg&quot; 含义：在html文件所在的文件夹中查找image文件夹，在image文件夹里查找img.jpg的图片 上级：存储图片的位置和存储代码的文件夹在同一个文件夹里 格式：src=&quot;../img.jpg&quot; 含义：在.html文件所在的文件夹中找到这个文件夹的上一级文件夹，然后再上一级文件夹中找到img.jpg的图片，其中../代表从当前位置找到上一级文件夹 绝对路径赋值（了解）每次从指定的盘符开始查找 格式：src=&quot;C:\Users\img.jpg&quot; 含义：在C盘下找到Users文件夹，在Users文件夹下找到img.jpg。 注意点 路径中不要出现中文字符，否则可能出现未知问题 如果通过相对路径来指定，那么不能跨盘符 在企业开发中如果需要编写路径，统一使用反斜杠/，不要用正斜杠，因为将来在我们开发的程序可能会部署到其他操作系统的服务器上，在其他操作系统中路径都是/ 。 在企业开发中，一般情况下不使用绝对路径，因为可移植性差。 br标签 作用：换行 格式：&lt;br&gt; 注意点 多个br标签可以连续使用，使用多少个br标签就会换多少行 由于HTML的作用是用来给文本添加语义的，br标签的语义是不另起一个段落换行，也就是在段落内换行，而在企业开发中一般情况下需要换行都是因为需要另起一个段落，所以在企业开发中很少使用br标签。 换行还可以使用&lt;p&gt;&lt;/p&gt; a标签 作用：控制页面与页面之间的跳转 格式：&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt;需要展现给用户看的内容&lt;/a&gt; 属性 target：专门用于控制如何跳转 _self：在当前选项卡中跳转，默认为_self。 _blank：在新的选项卡中跳转，也就是新建页面跳转。 title：鼠标悬停时显示的提示文本 注意点 a标签不仅可以让文字可以点击，也可以让图片，例如&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt; &lt;img src=&quot; &quot;&gt; &lt;/a&gt; 一个a标签必须有一个href属性，否则a标签不知道要跳转到什么界面 如果通过a标签的href属性指定一个URL地址，那么必须在地址前面加上http://或https://。 a标签的href属性既可以指定网页地址，也可以指定本地地址。 拓展 假链接 作用：点击后不会跳转 意义：在企业开发前期，其他页面还没有写出来，那么我们不知道要跳转到什么地方，所以使用假链接来代替。 格式：#与javascript 区别：#的假链接会自动返回网页的顶部，javascript则不会。 制作返回顶部的功能，可以使用# 。 锚点 作用：在当前页面跳转 格式：&lt;a href=&quot;#id名称&quot;跳转的地方&gt;&lt;/a&gt; ​ &lt;h2 id=&quot;名称&quot;地方&gt;&lt;/h2&gt; 注意点 没有过渡动画，立即跳转。 a标签除了可以跳转到当前界面的指定位置，也可以跳转到其他界面的指定位置。 123456789&lt;a href="https://www.baidu.com/" target="_blank" title="百度"&gt;百度一下&lt;/a&gt;&lt;a href="#"&gt;返回顶部&lt;/a&gt;&lt;a href="javascript"&gt;原地不动&lt;/a&gt;&lt;a href="#center"&gt;跳转到中部&lt;/a&gt;&lt;h2 id="center"&gt;我是中部&lt;/h2&gt;&lt;a href="锚点测试.html#ceshi"&gt;跳转到锚点测试界面的指定位置&lt;/a&gt; bace标签 作用：专门用于统一制定当前网页中所有的超链接(a标签)需要如何跳转 注意点 base标签必须写在head标签的开始标签和结束标签之间 如果同时在 base 标签与 a 标签中制定了 target ，那么浏览器会优先按照 a 标签中的来执行 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;bace标签&lt;/title&gt; &lt;base target="_blank"&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 列表标签 无序列表（unordered list） 作用：给一堆数据添加列表语义，所有数据没有先后之分。 格式： 123456&lt;ul&gt; &lt;li&gt;需要显示的条目内容&lt;/li&gt;&lt;/ul&gt;&lt;!-- li是英文list(列表) item(条目)的缩写--&gt; 注意点 ul 标签是用来添加语义的，而不是添加小圆圈。 ul 标签和 li 标签是一个整体（组合），一般成对出现，不会单个出现。 由于是一个组合，所以 ul 标签中不推荐包含其他标签（ li 标签里可以放其他标签）。 应用场景：新闻列表、商品列表、导航条]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>初始页面</category>
      </categories>
  </entry>
</search>
