<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[软件工程期末复习]]></title>
    <url>%2F2018%2F11%2F23%2F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99%2F</url>
    <content type="text"><![CDATA[选择填空题 其中，软件开发技术包含了软件开发学、软件工具和软件工程环境;软件工程管理包含了软件管理学、软件经济学和软件度量学。 从广义上讲，软件是依据某一特定的观念、原则所形成的某类操作行为和文件。计算机软件，则是指计算机各操作程序、操作程序所使用的数据以及有关的文档资料的集合。 从软件的一般属性和本质来看，具有如下几个特点。 软件是一种逻辑实体，不是具体的物理实体。 软件的不可见性决定了它的抽象性。 软件的生产是一种认知过程。 软件的构造性与演化性。 软件的非实体性。 软件的本质是数字存在。 复杂性是“软件危机”的本质原因。 软件过程则是指将软件工程方法与软件工具相结合，实现合理、及时地进行软件开发的目的，为开发高质量软件规定各项任务的工作步骤。软件工程的根基在于质量关注点。 结构化分析使用需求建模方法，以数据流图和控制流图为基础，由系统分析员划分出流变换函数，以得到系统的软件结构，并将其映射为软件功能。其次用状态迁移图来创建行为模型，用数据词典开发成数据模型。（结构化方法的主要思想） 瀑布模型强调系统开发应有完整的周期，且必须完整地经历周期中的每一个开发阶段。由于该模式强调系统开发过程需有完整的规划、分析、设计、测试及文件等管理与控制，因此能有效地确保系统品质，它已经成为业界大多数软件开发的标准。 软件过程成熟度是指一个特定的软件过程被显式地定义、管理、度量、控制和能行(按步骤执行)的程度。 软件能力成熟度模型(CMM)分为5个等级:一级为初始级，二级为可重复级，三级为已定义级，四级为已定量管理级，五级为优化级。 项目范围管理是确保项目包括完成项目所需的全部工作，但又只包括必须完成的工作的各个过程。它主要关心的是确定与控制那些应该与不应该包括在项目之内的过程。 工作分解结构(WBS)是一个详尽的、层次的(从全面到细节)树形结构，由明确的可提交项目目标与为了完成项目需要执行的任务组成。WBS的目的是识别项目中实际需要完成的工作。 甘特图，也称为条状图，是在1917年由亨利·甘特开发的，其内在思想简单，基本是一条线条图，横轴表示时间，纵轴表示活动(项目)，线条表示在整个期间上计划和实际的活动完成情况。 LOC指所有的可执行的源代码行数，包括可交付的工作控制语言语句、数据定义、数据类型声明、等价声明、输入/输出格式声明等。 Putnam估算模型如下: L=P×E1/3td4/3 其中:L为源代码行数(以LOC计)；E为开发与维护的工作量(以人年计)；td 为开发时间(以年计)；P为生产率参数，与开发环境有关。 单利终值是本金与未来利息之和，其计算公式为: F=P ( 1 + i × t ) ，P:现值；i:利率；F:终值；t：时间。 单利现值是资金现在的价值。单利现值的计算就是确定未来终值的现在价值。单利现值的计算公式为：P= F / ( 1 + i × t ) 。 复利终值是指一定数量的本金在一定的利率下按照复利的方法计算出的若干时期以后的本金和利息。项目成本计算一般采用复利计算。复利终值的计算公式为: F = P (1 + i )n 假定年利率为 i，如果现在存入P元，则n年后可以得到的钱数F ，P：现值；i: 利率；F：终值；n：时间(或称期数) 复利现值刚好与复利终值计算相反，即把未来价值折合成今天的价值。其计算公式为： P=F(1+i)-n 如果n年后能收入F元钱，那么这些钱的现在的价值是P。 净现值的计算公式为： NPV=未来收入的总现值－所有支出的现值 项目风险源于任何项目中都存在的不确定性。风险管理是软件项目管理的重要内容。软件风险管理就是通过主动而系统地对项目风险进行全过程的识别、分析和监控，最大限度地降低风险对软件开发的影响。 风险揭露(RE)，用公式可以表示为: RE=P · C RE表示风险揭露；P表示风险发生的不确定性(用概率表示事件发生的可能性)；C表示风险产生时带来的损失程度(例如项目成本)。 一般认为软件风险有3种类型，即项目风险、技术风险与商业风险。 测试的任务是发现错误，而调试的任务是诊断和改正程序中的错误。 计算题 第四章 软件项目估算 19、已知有一个典型的软件项目的记录，开发人员M = 3人，其代码码行数= 12.1KLOC,工作量E=24PM,成本S=168000美元。试计算开发该软件项目的生产率P和每代码行平均成本C。(同书P84 例 4-1) P=LE\frac{L}{E}​E​​L​​=12.1K24\frac{12.1K}{24}​24​​12.1K​​=504 LOC/PM C=SL\frac{S}{L}​L​​S​​=1680012.1K\frac{16800}{12.1K}​12.1K​​16800​​=139 P/LOC 20、使用COCOMO Ⅱ模型来估算一个软件系统所需的工作量，该系统产生12个屏幕、10个报表,需要大约80个软件构件。假定该软件具有“中等”复杂度和“正常开发者环境”成熟度,复用的百分比为40%。试完成以下计算: (1)计算项目的NOP. (2)进行工作量估算(人月)。 (3) 假设软件人员劳动力平均价格是每月5000元人民币，求每个NOP的成本。 (1) NOP=（12×2+10×5+80×6）×0.6=332.4 (2) PM = 332.4/13=25.6 (3) \frac{PM×5000}{NOP} = \frac{25.6×5000}{332.4}=384.6 21、根据下面的信息域特性值: 外部输入数 外部输出数 外部查询数 内部接口数 外部文件数 10 12 15 8 8 假设各项加权因子均为5，不考虑复杂度调整值(即: ∑\sum∑Fi =0)，试完成以下计算: (1)计算项目的功能点的总计数值FP (2)设平均生产率为10FP/pm,软件人员劳动力平均价格是每月500元人民币，求每个FP的成本。 (3)根据FP值计算总的项目成本，并进行工作量估算(人月)。 (1) FP = (10+12+15+8+8)×5×0.65 = 172.25 (2) 5000/10 = 500 元/FP (3) 500×172.25 = 8612.5 172.25/10 = 17.225]]></content>
      <categories>
        <category>复习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络整理(持续更新中)]]></title>
    <url>%2F2018%2F10%2F17%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[第一章 概述 （1）因特网的边缘部分和核心部分的作用，这里面包含分组交换的概念。 （2）计算机网络的一些性能指标。 （3）计算机网络分层次的体系结构，包含协议和服务的概念。 21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。 “三网”：电信网络、有线电视网络和计算机网络。 电信网络和有线电视网络都逐渐融入了现代计算机网络的技术，这就产生了**“网络融合”**的概念。 计算机网络向用户提供的最重要的功能有两个，即： 连通性：使上网用户之间都可以交换信息，好像这些用户的计算机都可以彼此直接连通一样。 共享：就是资源共享，资源共享的含义是多方面的。可以是信息共享、软件共享，也可以是硬件共享。 起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网。 网络(network)由若干结点和连接这些结点的链路组成。网络中的结点可以是计算机、集线器、交换机或路由器等。 网络把许多计算机连接在一起，而因特网则把许多网络连接在一起。 因特网发展的三个阶段 第一阶段是从单个网络ARPANET向互联网发展的过程。 以小写字母 i 开始的 internet （互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。 以大写字母 I 开始的 Internet （因特网）则是一个专有名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。 第二阶段的特点是建成了三级结构的因特网。 三级计算机网络，分为主干网、地区网和校园网（或企业网）。 第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网 因特网服务提供者ISP（Internet Service Provider），在许多情况下，其就是一个进行商业活动的公司，因此 ISP 又常译为因特网服务提供商，例如中国电信、中国联通和中国移动就是我国最有名的ISP。 IP 地址的管理机构不会把一个单个的IP地址分配给单个用户（不“零售”IP地址），而是把一批IP地址有偿租赁给经审查合格的ISP（只“批发”IP地址）。 因特网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。这样就使因特网上的数据流量分布更加合理，同时也减少了分组转发的迟延时间，降低了分组转发的费用。 制定因特网的正式标准要经过以下的四个阶段【RFC 2026】： 因特网草案——在这个阶段还不是RFC文档。 建议标准——从这个阶段开始就成为RFC文档。 草案标准。 因特网标准。 因特网的组成 边缘部分：由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传输数据、音频或视频）和资源共享。 我们说“主机A和主机B进行通信”，这也就是指：”主机A的某个进程和主机B上的另一个进程进行通信。这种比较严密的说法通常可以简称为**“计算机之间的通信”**。在网络边缘的端系统之间的通信方式通常可划分为两大类：客户-服务器方式（C/S 方式）和对等方式（P2P方式） 客户-服务器方式：客户是服务请求方，服务器是服务提供方。客户和服务器本来都指的是计算机进程（软件）。 对等连接方式：两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。对等连接工作方式可支持大量对等用户。 核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。 是因特网中最复杂的部分，因为网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一台主机都能够向其他主机通信。在网络核心部分起特殊作用的是路由器，它是一种专用计算机（但不是主机）。路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。 电路交换的主要特点 经过**”建立连接**（占用通信资源）–&gt; 通话（一直占用通信资源） --&gt; 释放连接（归还通信资源）“三个步骤的交换方式称为电路交换。使用电路交换来传送计算机数据时，其线路的传输效率往往很低，被用户占用的通信线路资源在绝大部分时间里都是空闲的。 分组交换的主要特点 采用存储转发技术，通常我们把要发送的整块数据称为一个报文。把较长的报文划分成一个个更小的等长数据段，在每一个数据段前面，加上一些必要的控制信息组成的首部后，就构成了一个分组（又称“包”，分组的首部也可称为“包头”），分组的首部包含了诸如目的地址和源地址等重要控制信息。 为了提高分组交换网的可靠性，因特网的核心部分常采用网状拓扑结构，使得当发生网络拥塞或少数结点、链路出现故障时，路由器可灵活地改变转发路由而不至于引起通信的中断或全网的瘫痪。 分组交换的优点 优点 所采用的手段 高效 在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用 灵活 为每一个分组独立地选择转发路由 迅速 以分组作为传送单位，可以不先建立连接就能向其他主机发送分组 可靠 保证可靠性的网络协议：分布式多路由的分组交换网，使网络有很好的生存性 位于网络边缘的主机和位于网络核心部分的路由器都是计算机，不一样的是，主机是为用户进行信息处理的，并且可以和其他主机通过网络交换信息。路由器则是用来转发分组的，即进行分组交换的。 电路交换——整个报文的比特流连续地从源点直达终点，好像在一个管道中传送。 报文交换——整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。 分组交换——单个分组（这只是整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。 计算机网络 一些互相连接的、自治的计算机的集合 按网络的作用范围进行分类：广域网 WAN、城域网 MAN、局域网 LAN、个人局域网 PAN 按网络的使用者进行分类：公用网、专用网 计算机网络的性能指标 速率： 未完待续~~~]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ASP.NET期末复习]]></title>
    <url>%2F2018%2F06%2F28%2FASP.NET%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、.NET选择填空复习内容 Visual Studio是一套完整的开发工具集，用于生成ASP.NET Web 应用程序、桌面应用程序和移动应用程序等。在Visual Sudio中，Visual Basic、Visual C++、Visual C#和Visual J#等语言都使用相同的集成开发环境(IDE)，利用此IDE可以共享工具且有助于创建混合语言解决方案。 HTML 是英文HyperText Markup Language 的缩写，中文的意思是超文本标记语言。它是通过嵌入代码或标记的方式来表明文本格式的国际标准。用它编写的文件扩展名是 .html或 .htm,这种网页文件的内容是静态的，而且无法与后台数据库结合使用。 ASP.NET并不是ASP的简单升级，而是基于.NET Framework技术的新一代Web应用程序开发系统，可以在Web服务器上建立的功能强大的Web应用程序。 域名通常可以分为国际顶级域名和国内域名两种情形。国际顶级域名以 .com、.org、 .net、 .edu等为后缀，.com表示商业机构，.net 表示网络服务机构，.gov 表示政府机构，.edu 表示教育机构。国内域名是在国际顶级域名的后面添加代表国家的后缀所构成的，如 .cn 代表中国、.us 代表美园、.uk代表英国。 ASP.NET工程通常包含两个目录，即Projects和WebSites。Projects 目录下保存实例的工程目录，WebSites 目录下保存实例的网站代码。 解决方案是个容器，可以包含多个工程，用于管理Visual Studio配置、生成和部署相关项目集的方式。 C#项目文件的扩展名为 .csproj，用于管理应用程序所需的引用、数据连接、文件夹和文件的信息。 .NET Framework 具有两个主要组件，即公共语言运行库(CLR)和.NET Framework类库。公共语言运行库是.NET Framework的基础。可以将运行库看作一个在执行时管理代码的代理，它提供内存管理、线程管理和远程处理等核心服务，并且还强制实施严格的类型安全和代码准确性检查。 值类型的变量用于直接存储变量的值。例如，一个整数类型int占用4个字节的内存空间，其中用于保存一个整数值。 引用类型与值类型的最大区别在于，引用类型变量不直接存储所包含的值，而是指向它所要存储的值。 委托(delegate) 相当于C中的函数指针，但是委托是类型安全和可靠的，它避免了C中由于没有释放指针而导致的资源泄露现象，也不会因为指针指向不正确的地址而产生异常。 object类型是.NET Framework中System.Object的别名。在C#的统一类型系统中，所有类型都是直接或间接从Object继承的 。 常量具有固定的值， 在程序中常量的值不能发生改变。在C#语言中， 可以使用const关键字来声明常量 。 多态性指相同的操作可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。 在.NET FrameWork中,Page类是ASP.NET应用程序在.aspx文件中构建所有对象的基类 。 Label 控件又称标签控件，主要用来显示文本。 TextBox控件主要用来显示一个文本框，供用户输入文本。该控件有3种呈现方式：单行文本输人、多行文本输人和密码输入。 Image 控件又称为图像控件，与HTML语言中Img标识符相似，主要用来显示用户图像 。 CheckBox控件是一个方型多选(复选框)控件，多个CheckBox 控件可以组合成一个CheckBoxList控件，在效果上是一致的 。 Calendar 控件是日历专用控件，它提供了数十种控件日历外观属性。 Panel控件和PlaceHolder控件一样，可以作为其他控件的容器。可以对Panel控件中包含的所有控件进行统一配置，例如同时控制多个子控件的可见性和可用性 。 RequireFieldValidator 控件又称非空验证控件，常用于对TextBox控件进行非空验证。 RegularExpressionValidator控件又称为正则表达式验证控件，它的验证功能比其他验证控件更强大，用户可以定义或书写自己的验证表达式。 CompareValidator控件称为比较验证控件，使用CompareValidator控件可以将输人控件的值与常数值或其他控件的值相比较，以确定两个值的关系(大于、等于、小于等) 。 Response对象用于响应客户端的请求，将信息传递给用户。可以使用Response对象向网页中输出文本或者编写Cookie等。 一个ASP.NET应用程序可以拥有多个配置文件，而且配置文件名称都是Web.config。这些配置文件可以出现在ASP.NET Web应用程序服务器上的多个目录中。每个Web.config文件都将配置信息应用于它自己的目录和它下面的所有子目录。子目录中的配置文件可以提供除从父目录继承的配置信息以外的配置信息，子目录配置设置可以重写或修改父目录中定义的设置。 服务器的配置信息保存在名为 machine.config 的配置文件中，它一般保存在”%systemroot%\Microsoft.NET\Framework\V版本号\CONFIG\”目录下。 那么如何在ASP.NET网页中定义和使用全局变量呢? Application 对象提供了这种机制。Application对象可以提供给多个客户端用户共享信息，所有的客户端用户都可以访问Application对象中保存的数据。 Global.asax文件是一个可选文件，用户可以在该文件中指定某个事件发生时执行的代码。该文件必须存放在应用程序的根目录中，而且每个应用程序只能有一个Global.asax文件。 Session的中文含义为会话，Session 对象用于保存用户从登录网页到离开这段时间内的相关信息，如用户名、密码、IP地址、访问时间等。 ViewState对象通常用于在整个往返过程期间保持网页上的窗体数据。当网页提交服务器后，ViewState对象不再保存原先的数据，系统将自动清空ViewState对象中的数据。 AJAX全称为 Asynchronous JavaScript and XML (异步JavaScript和XML)，是一种创建交互式网页应用的网页开发技术。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库期末复习]]></title>
    <url>%2F2018%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一. 简答题 简答题一 1. 简述数据库概念、数据库系统组成及数据库系统特点 **数据库概念：**数据库是长期储存在计算机内的、有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。 **数据库系统组成：**数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DataBase Administrator，DBA）组成的存储、管理、处理和维护数据的系统。 **数据库系统特点：**数据库系统主要有以下4方面的特点。 ①数据结构化。 ②数据的共享性高,冗余度低,易扩充。 ③数据独立性高。数据独立性包括数据的物理独立性和数据的逻辑独立性。 ④数据由DBMS统一管理和控制。 2. 简述数据库系统设计步骤及每个步骤的主要任务与文档 **需求分析：**准确了解与分析用户需求（包括数据与处理）。 **概念结构设计：**通过对用户需求进行综合、归纳与抽象，形成一个独立于具体 DBMS 的概念模型。 **逻辑结构设计：**将概念结构转换为某个 DBMS 所支持的数据模型，并对其进行优化。 **数据库物理设计：**为逻辑数据模型选取一个最适合应用环境的物理结构（包括存储结构和存取方法）。 **数据库实施：**设计人员运用 DBMS 提供的数据语言、工具及宿主语言，根据逻辑设计和物理设计的结果建立数据库，编制与调试应用程序，组织数据入库，并进行试运行。 **数据库运行和维护：**在数据库系统运行过程中对其进行评价、调整与修改。 3. 视图概念及其意义 概念：视图是从一个或多个基本表（或视图）导出的表。它与基本表不同，是一个虚表。具有普通表的结构，但是不实现数据存储。 意义： 能够简化用户的操作。 使用户能以多种角度看待同一数据。 对重构数据库提供了一定程序的逻辑独立性。 能够对机密数据提供安全保护。 适当利用视图可以更清晰地表达查询。 4. 安全性概念，数据库系统常采取的安全性措施 安全性概念：数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。 安全性措施： 用户标识和鉴别：该方法由系统提供一定的方式让用户标识自己的名字或身份。每次用户要求进入系统时，由系统进行核对，通过鉴定后才提供系统的使用权。 存取控制：通过用户权限定义和合法权检查确保只有合法权限的用户访问数据库，所有未被授权的人员无法存取数据。例如CZ 级中的自主存取控制( DAC ) , Bl 级中的强制存取控制（MAC ）。 视图机制：为不同的用户定义视图，通过视图机制把要保密的数据对无权存取的用户隐藏起来，从而自动地对数据提供一定程度的安全保护。 审计：建立审计日志，把用户对数据库的所有操作自动记录下来放入审计日志中，DBA 可以利用审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容等。 数据加密：对存储和传输的数据进行加密处理，从而使得不知道解密算法的人无法获知数据的内容。 5. 什么是SQL 注入入侵，解决方案有哪些 (来自百度百科) SQL 注入入侵：所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。 解决方案：输入验证 、错误消息处理 、加密处理 、存储过程来执行所有的查询 、使用专业的漏洞扫描工具 、确保数据库安全 、安全审评 。 6. 数据库的完整性概念，说说你所了解的SERVER所提供的完整性解决方案 概念：数据库的完整性是指数据的正确性和相容性。 SQL Server 所提供的完整性解决方案：实体完整性、参照完整性、用户自定义的完整性、完整性约束命名子句、域中的完整性限制、断言(SQL Server无断言)、触发器 7. 简述什么是数据库的逻辑独立性与物理独立性，数据库系统采用什么技术手段保证它 逻辑独立性：指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，用户程序也可以不变。 物理独立性：指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。当数据的物理存储改变了，应用程序不用改变。 数据库系统采用什么技术手段保证它：三级模式（模式、外模式、内模式）二级映像（外模式/模式映像、模式/内模式映像） 8. 关系的形式化定义与数学定义分别是什么？关系具有6个基本特征是什么？什么是关系模式 关系的形式化定义： 关系的数学定义： 关系的6个基本特征： 列是同质的，即每一列中的分量是同一类型的数据，来自同一个域。 不同的列可出自同一个域，称其中的每一个列为一个属性，不同的属相要给予不同的属性名 列的顺序无所谓，即列的次序可以任意交换。 任意两个元组的候选码不能取相同的值 行的顺序无所谓，即行的次序可以任意交换。 分量必须取原子值，即每一个分量都必须是不可分的数据项。 关系模式：关系的描述称为关系模式，它可以形式化地表示为 R( U，D，DOM，F )，其中R为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。 简答题二 1. 有二个事务如下所示： T1：A=A*B+C； T2：B=B+A； 试设计一个符合两段锁协议且不产生死锁的可串行化调度，设A初值为2，B初值为5，C初值为1 你的设计是否冲突可串行化？ 2. 事务概念，事务的四个性质分别是什么名称与内容。 概念：事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位。 事务的4个性质：原子性（Atomicity ）、一致性（consistency ）、隔离性( Isolation ）、持续性（Durability ）。这4 个特性也简称为ACID 特性。 原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。 一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 持续性：持续性也称永久性（Perfnanence ) ，指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。 3. 例举丢失更新，如何解决丢失更新，对应的封锁协议，SQL SERVER对应的隔离级别是什么 丢失更新：两个事务T1和T2读入同一数据并修改，T2提交的结果破坏了T1提交的结果，导致T1的修改被丢失。 对应的封锁协议：一级封锁协议。 对应的隔离级别：未提交读READ UNCOMMITTED，SQL：set transaction isolation level read uncommitted 4. 例举读脏数据，如何解决脏数据，对应的封锁协议，SQL SERVER对应的隔离级别是什么 读脏数据：指事务T1修改某一数据并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤销，这时被T1修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据就为读脏数据。 对应的封锁协议：二级封锁协议。 对应的隔离级别：提交读（READ COMMITTED），SQL：set transaction isolation level read committed 5. 例举不可重复读，如何解决不可重复读，对应封锁协议，SQL SERVER对应的隔离级别是什么 不可重复读：指事务T1读取数据后，事务T2执行更新操作，使T1无法再现前一次读取结果。 事务T1读取某一数据后，事务T2对其进行了修改，当事务T1再次读该数据时，得到与前一次不同的值。 对应的封锁协议：三级封锁协议。 对应的隔离级别：不一致的读REPEATABLE READ，SQL：set transaction isolation level repeatable read 6. 例举幻读，如何解决幻读，对应的封锁协议，SQL SERVER对应的隔离级别是什么 幻读： 事务T1按一定条件从数据库中读取了某些数据记录后，事务T2删除了其中部分记录，当T1再次按相同条件读取数据时，发现某些记录神秘地消失了 事务T1按一定条件从数据库中读取了某些数据记录后，事务T2插入了一些记录，当T1再次按相同条件读取数据时，发现多了一些记录。 对应的封锁协议：三级封锁协议。 对应的隔离级别：幻读（SERIALIZABLE），SQL：set transaction isolation level serializable 7. 例举什么是死锁，常用的死锁有哪些解决方案，简述你所了解的SQL SERVER对死锁的解决方案 死锁：如果事务T1封锁了数据R1,T2封锁了数据R2,然后T1又请求封锁R2,因T2已封锁了R2,于是T1等待T2释放R2上的锁。接着T2又申请封锁R1,因T1已封锁了R1,T2也只能等待T1释放R1上的锁。如下图所示。这样就出现了T1在等待T2,而T2又在等待T1的局面,T1和T2两个事务永远不能结束,形成死锁。 T1 T2 Lock R1 Lock R2 Lock R2 等待 等待 Lock R1 等待 等待 防止死锁的发生其实就是要破坏产生死锁的条件。预防死锁通常有两种方法: ①一次封锁法：要求每个事务必须一次将所有要使用的数据全部加锁,否则就不能继续执行。 ②顺序封锁法 ：预先对数据对象规定一个封锁顺序,所有事务都按这个顺序实行封锁。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统期末复习]]></title>
    <url>%2F2018%2F06%2F20%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[简答题 1.操作系统的主要功能（5点） 根据课本：1. 进程、线程与作业，2. 中断与处理器调度，2. 互斥、同步与通信，3. 死锁与饥饿，4.存储管理，5. 文件系统，6.设备与输入输出管理 根据百度：处理器管理、存储器管理、设备管理、文件管理、作业管理（来自百度百科） 2.什么是死锁？(P146) 死锁产生的必要条件有哪些?（P147） 死锁：一组进程中的每个进程均等待此组进程中其他进程所占有的、因而永远无法继续向前推进，这种现象称为进程死锁，简称死锁。 死锁的必要条件：1. 资源独占，2. 不可剥夺，3. 保持申请，4.循环等待(注意: 当且仅当4个条件同时满足时，死锁才会发生) 3. 进程有哪几种状态，画出进程的状态转换图（P28~P29图2-3） 3种状态：运行态，就绪态，等待态 转换图如下 4. 进程与程序的联系与区别（P34 2.2.9） 联系 程序是构成进程的组成部分之一，一个进程存在的目的就是执行其所对应的程序。如果没有程序，进程就失去了其存在的意义。 区别 程序是静态的，而进程则是动态的。 程序可以写在纸上或在某种存储介质上长期保存，而进程具有生命周期，创建后存在，撤销后消亡。 一个程序可以对应多个进程，但是一个进程只能对用一个程序。 5. 段式存储与页式存储的管理的区别（P187） 分页和分段都采用离散分配方式，但两者有显著的差别。 (1) 页是信息的物理单位．分页是系统的需要．是为了提高内存的利用率；段是信息的逻 辑单位．目的在于更好地满足用户的需要 (2) 页的大小固定。由系统确定．一个系统只能有一种大小的页面：段的长度不固定。决定于用户的程序。 (3) 分页的作业地址空间是—维的．单一的线性地址空间；分段的作业地址空间是二维的。—个地址包括段号和段内地址。 计算题 1. 处理机调度算法(FCFS、SJF、HRN、RR)（P61 - P66） 掌握四个算法的平均周转时间与平均带权周转时间的计算，要画甘特图 **先到先服务算法(First-Come First Served,FCFS)——作业/进程 ** **按照进程申请CPU的次序，即进入就绪状态的次序来调度。非抢占型，有利于CPU繁忙型作业，对I/O繁忙型作业不利。 ** 优点：公平，不会出现饿死的情况。 ** 缺点：短进程（线程）等待时间长，从而导致平均等待时间较长。** 例：有如下CPU阵发进程，时间单位为毫秒。假定进程到达次序为P1，P2，P3，CPU调度状况可用Gantt图表示，如下图所示。 先到先服务算法调度性能指标 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 27 0 27 27 1 P2 1 3 27 30 29 9.67 P3 2 5 30 35 33 6.6 平均周转时间=29.67ms,平均带权周转时间=5.76ms。 ** 短作业优先算法（Shortest-Job-First，SJF）——作业** （非抢占式）按照CPU阵发时间递增的次序调度。在到达的作业中挑选所需运行时间（估计值）最短的作业进入主存先运行。 优点：其平均周转（等待）时间最短，易证。 缺点：不公平性，一个较长的就绪任务可能由于短任务的不断到达而长期得不到运行机会，甚至被饿死。 例：如下进程集合以及CPU阵发时间，采用SJF算法，Gantt图如下所示。 **最短作业优先算法调度性能指标 ** 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 12 15 27 27 2.25 P2 0 5 3 8 8 1.6 P3 0 7 8 15 15 2.14 P4 0 3 0 3 3 1 平均周转时间=13.25ms,平均带权等待时间=1.75ms。 **最高响应比优先算法 （Highest-Response-Ration-Next，HRN） ** （非抢占式）最高响应比优先算法是FCFS算法和SJF算法的折中，响应比计算公式如下： 其中RR——响应比，BT——CPU阵发时间，WT——等待时间=调度时间-到达时间。 ** 按照高响应比优先的原则，在每次选择作业投入运行时，先计算此时后备作业队列中每个作业的响应比，然后选择响应比值最大的作业投入运行。** 对于同时到达的任务，处理时间短的将被优先调度，处理时间较长的作业将随其等待时间的增加而动态提升其响应比，因而不会出现饥饿现象。 例：习题P.80 35题 **循环轮转算法（Round-Robin，RR） ** ——系统为每一个进程规定一个时间片(time slice)，所有进程按照其时间片的长短轮流地运行。即每当处理机空闲时选择就绪队列头部的进程使其投入运行，同时分给它一个时间片，当此时间片用完时，如果此进程既未结束，其CPU阵发也未因某种原因而等待，则抢占此进程所占有的处理机，将其排在就绪队列的尾部，并选择就绪队列中对头的进程运行。 ①基本轮转：分给所有进程时间片的长度是相同的，且不变的。 若不考虑I/O等待，系统中所有进程以基本均等的速度向前推进。 ②改进轮转：分给不同进程的时间片的长度是不同的，而且（或者）是可变的。系统可以根据不同进程的不同特性为其动态地分配不同长度的时间片，以便达到更灵活的调度效果。 需认真考虑时间片长度： 若过长，则影响系统的响应速度； 若过短，则会频繁发生进程切换，增加系统开销。 通常，时间片长度为几十毫秒至几百毫秒。 循环轮转算法特别适用于分时系统，具有公平、响应及时等特点。 调度时机：①时间片用完；②进程本身结束。 例：如下进程集合以及CPU阵发时间，采用基本轮转算法，时间片长度为2ms，Gantt图如下所示。 循环轮转算法调度性能指标 进程 到达时间 运行时间 开始时间 完成时间 周转时间 带权周转时间 P1 0 12 0 26 26 2.17 P2 0 4 2 12 12 3 P3 0 7 4 22 22 3.14 P4 0 3 6 15 15 5 平均周转时间=18.75ms，平均带权周转时间=3.33ms。 2. 实时调度算法（EDF、RMS） 需用公式进行判断，所需表格会提供 最早截止期优先调度(Earliest-Deadline-First,EDF) 最早截止期优先调度(Earliest-Deadline-First,EDF)优先选择完成截止期最早的实时任务。对于新到达的实时任务，如果其完成截止期先于正在运行任务的完成截止期，则重新分派处理机，即抢占。可证，对EDF算法，公式 **是实时任务可调度的充分条件。 ** 例：表3-1给出两个周期性实时任务 进程 就绪时间 处理时间 完成截止期 发生周期 A 0 10 20 20 B 0 25 50 50 按最早截止期、可抢先原则调度的结果如图3-17所示 。 速率单调调度(Rate-Monotonic Scheduling,RMS) 速率单调调度(Rate-Monotonic Scheduling,RMS)是面向周期性实时任务，属于非抢占式调度范畴。RMS将任务的周期作为调度参数，其发生频率越高，调度级别越高。已证，RMS算法可调度的条件如下： 对应不同的n值，表3-2给出了RMS算法可调度的上界值。可看出，随着任务数的增加，调度限制趋近于ln2≈0.693。 表3-2 RMS上限值 n 1 1.0 2 0.828 3 0.780 4 0.757 5 0.743 6 0.735 … … ∞ ln2≈0.693 例：考虑表3-3所示的三个周期性实时任务。 表3-3 周期性实时任务 进程 发生周期Ti 处理时间Ci A 100 20 B 150 40 C 350 100 由于 因而可知RMS能够满足所有任务的调度要求。具体调度结果如图3-18所示。 从CPU利用率来说，RMS算法不及EDF算法效率高，但具有如下优势： (1)RMS是非抢占式的，实现简单； (2)二者效率相差并不十分明显，对于具体任务集合来说，处理机利用率常可达到90%左右。 作业：P79 32题 3.银行家算法 Banker’s algorithm, E.W. Dijkstra. 进程：事先申明所需资源最大量（并不分配） 系统：对每个可满足的资源申请命令进行安全性检查。 P={p1,p2,…,pn}; **R={r1,r2,…,rm}; ** **数据结构： ** Available: array[1…m]of integer; //系统可用资源 Claim: array[1…n,1…m]of integer; //进程最大需求 Allocation: array[1…n,1…m]of integer; //当前分配 Need: array[1…n,1…m]of integer; //尚需资源 Request: array[1…n,1…m]of integer; //当前请求 临时变量： Work: array[1…m]of integer; Finish: array[1…n]of boolean; 设X,Y为下标1…l 的一维数组： ** X≤Y 等价于 任意j (1≤j≤l), X[j]≤Y[j] X:=Y 等价于 任意j (1≤j≤l), X[j]:=Y[j] X:=c 等价于 任意j (1≤j≤l), X[j]:=c X±Y 等价于 任意j (1≤j≤l), X[j]±Y[j] ** 银行家算法——资源分配算法 银行家算法——安全性检查算法 例：设系统中有三个资源类{A,B,C}。R={A(10),B(5),C(7)}；P={p0,p1,p2,p3,p4}。 安全进程序列：&lt;p1,p3,p4,p2,p0&gt; p1请求：Request[1]=(1,0,2),假定分配： ** 安全进程序列：&lt;p1,p3,p4,p2,p0&gt;** ** 若在上面新的状态下: p4请求：Request[4]=(3,3,0), 不能满足，等待； p0请求：Request[0]=(0,2,0), 不安全，等待。** 例：银行家算法的保守性。R={A,B}, 申请a, b; 释放a, b P={p1,p2}, p1: a b a b; p2:b b b a b a ,假定某时刻系统状态如下: Request[2]=(0,1), 该请求Request[2]≤Need[2]且Request[2]≤Avaiable,假定分配。 Request[2]=(0,1), 不安全，取消分配（分配不导致死锁，如p2(b),p1(b),p1(a),p1(b),p2(b),p2(a),p2(b),p2(a)） 。 结论： Remarks1: 银行家算法要求条件：进程所需资源最大量, 这个信息对于充要性分析是不够的。 Remarks2: 假设：进程预先给出有关资源的命令序列，则可以给出死锁避免的充要性算法，复杂度（NP Complete)。 Remarks3: 预先给出进程有关资源的命令序列是困难的(程序的分支和循环）。 4. 信号灯与PV操作的应用 例4.2：生产者-消费者问题(producers and consumers problem)。假设某工厂一生产线上有一只用来装物品的箱子，其中有k个位置(k≥1)，每个位置可容纳一件物品，如图4-6所示。又设有两组人，分别为生产者和消费者，其活动分别为： 分析： ●当箱子已满时，生产者应等待于①处，待消费者执行到④处再将其唤醒； ●当箱子已空时，消费者应等待于③处，待生产者执行到②处时将其唤醒。 ●箱子中的位置相当于生产者的资源，用信号灯变量S1表示，其初值为k，即初始时有k个空位置； ●物品相当于消费者的资源，用信号灯变量S2 表示，其初值为0，即初始时有0件物品。 ●缓冲区首尾相连成环形如图4-7所示，in为放入指针，out为取出指针。 ●信号灯mutex用于进程对共享变量buffer和in，out的互斥。 例4.3：读者-写者问题(readers and writers problem)。设有一组共享数据DB和两组并发进程，一组进程只对此数据进行读操作，另一组进程可对此组数据执行写操作(当然同时也可执行读操作)。如图4-8所示，前一组进程称作读者，后一组进程称作写者。为了保证共享数据的完整性，要求：(1)多个读者的操作可同时进行；(2)多个写者的操作不可同时进行；(3)任何读者与写者的操作不可同时进行。 分析： ●变量r_w_w用来保证读者与写者之间的互斥以及写者与写者之间的互斥； ●变量readCount用来记录读者的数目； ●变量mutex用来实现读者对于变量readCount访问的互斥。 例4.4：3台打印机的管理。 设有3台类型相同的打印机，其编号分别为1、2、3，试编写一个申请函数require和一个释放函数return。当有打印机空闲时，返回分得的打印机编号，当无打印机空闲时则等待，被唤醒后返回分得的打印机的编号。retrun用于释放制定编号的打印机，当有申请者等待时就将其一唤醒。 5. 页式段式存储管理计算 具体戳书上 P181- P193 或 课件第六章，例题为P225 25、26 以下提供置换算法内容，相应例题为P224 17 **置换算法(replacement algorithm) ** 用于：页淘汰、段淘汰、快表淘汰。 Objective: lowest page-fault rate. 例：有如下页面访问序列： ** ** 6, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 6, 0, 1 假定内存为该进程分配3个物理页架，开始时内存页架为空。 (1)最佳淘汰算法(OPT–optimal) 淘汰将来最长时间以后才用到的。 效率最高，not feasible。 缺页故障次数为9。 (2)先进先出(FIFO) 淘汰最先调入的。 实现：队列，将所有页面按照进入内存的次序排成一个队列，当一个页面由外存调入内存时排入队尾，调入时间最早的页面被淘汰。 依据: 先进入的可能已经使用完毕。 negative case: 有些代码和数据可能整个程序运行中用到。 缺页故障次数为15。 FIFO页面淘汰算法会产生异常现象（Belady现象），即：当分配给进程的物理页面数增加时，缺页次数反而增加，称之为Belady异常。 (3)使用过最久的先淘汰（LRU） 淘汰最近一次访问距当前时间最长的。 缺页故障次数为12。 实现：stack。访问时，其对应的页面号由栈内取出送入栈顶。 淘汰时，取栈底页面号对应的页面。 6. 磁盘的物理特性 ** 所有扇区以一维的形式加以编号，编号顺序为0,1,…,l×m×n-1，称为块号。** 一维地址与三维地址的对应关系? 编址方法：使相邻块物理上最近，提高访问速度。 扇区号先变化，其次是盘面号，最后是柱面号。 例：柱面号为0～1，盘面号为0～2，扇区号为0～2。设柱面数为l，盘面数为m，扇区数为n； 又设柱面号为i，盘面号为j，扇区号为k，块号为b。则l=2; m=3; n=3** 三维地址→一维地址： b=i×m×n+j×n+k =((i×m)+j)×n+k** 一维地址→三维地址： ** i=b÷(m×n) j=b mod (m×n) ÷n k=b mod (m×n) mod n** 7. 设备调度 磁盘输入输出参数 三个因素：寻道时间、旋转延迟、传输时间。 (1)寻道时间Ts=m×n+s n为跨越磁道数，m为跨越一个磁道所用时间，s为启动时间。 (2)旋转延迟Tr=1/(2r) r为磁盘转速，这里是平均旋转延迟。 (3)传输时间Tt=b/(rN) b为读写字节数，r为磁盘转速，N为一条磁道上的字节数。 (4)访问时间Ta=Ts+Tr+Tt=m×n+s+1/(2r)+b/(rN) 访问磁盘通常是以扇区(块)为单位的，令M为一个磁道上的扇区个数，则一个扇区的访问时间为：Ta=Ts+Tr+Tt=m×n+s+1/(2r)+1/(rM) 磁盘引臂调度算法 优化服务顺序 考虑因素 ●公平性 防止饿死 ●高效性 减少磁盘引臂移动量 (1)先到先服务（FCFS） 请求序列：130，42，180，15，108，68，97 **移动量: (130-53)+(130-42)+(180-42)+(180-15)+(108-15)+(108-68)+(97-68)=630 ** (2)最短寻找时间优先（SSTF） 请求序列：130，42，180，15，108，68，97 **移动量: (53-42)+(180-42)+(180-15)=314 ** (3)电梯算法 LOOK 请求序列：130，42，180，15，108，68，97 **LOOK移动量: (53-15)+(180-15)=203 ** (4) 循环扫描 C-SCAN（C-LOOK） ** 请求序列：130，42，180，15，108，68，97** **特点：所有磁道的最长等待时间相同 ** 例题：一个只有单一移动磁头的磁盘，磁道由外向内编号为0、1、2……、199，磁头移动一个磁道所需时间为1ms，每个磁道有100个扇区，磁盘转速为6000rpm。采用循环Look引臂调度算法，当前引臂位置处于第100磁道，当前移动方向为由外向内，并规定引臂向内扫描时为路径请求服务。对于磁道请求120、85、70、30，每个请求访问对应磁道上的一个扇区，试问： (1)给出引臂移动序列，计算引臂移动量和寻道时间，忽略启动时间; (2)计算平均旋转延迟时间； (3)计算传输时间； (4)计算所有访问处理时间。 ** 解答：** (1)磁盘引臂移动序列为100、120、30、70、85，跨越磁道数为：20+90+40+15=165。共需寻道时间165×1ms=165ms。 (2)1次访问磁盘的旋转延迟为Tr=1/(2r)=1/(2×6000rpm)=1/(2×100rps)=5ms,4次访问磁盘的旋转延迟为4×5ms=20ms。 (3)1次访问磁盘的传输时间为Tt=1/(rM)=1/(6000rpm×100)=1/(100rps×100)=0.1ms,4次访问磁盘的传输时间为4×0.1ms=0.4ms。 (4)所有访问处理时间为：165+20+0.4=185.4ms。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web编程技术期末复习]]></title>
    <url>%2F2018%2F06%2F17%2FWeb%E7%BC%96%E7%A8%8B%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[jdbc与jsp全称 jdbc 全称为 Java Database Connectivity jsp 全称为 Java Server Pages, Java服务端网页 Web服务器端开发技术 CGI、PHP、ASP、JSP 常用Web服务器 IIS、Apache、Tomcat、BEA WebLogic、JRun、Jboss服务器、IBM公司的WebSphere服务器 Web编辑工具 FrontPage、Dreamweaver、EditPlus、UltraEdit、Eclipse JSP内置对象 out、request、response、session、application、exception 数据库的四要素 驱动、URL、用户名、密码 静态包含和动态包含的区别 include指令 功能：指定在JSP文件中包含的一个静态的文件，即在JSP文件被编译时需要插入的文本或代码。 语法：&lt;%@ include file= “文件名称”%&gt; 注意：当使用include指令时，包含文件是静态包含，即这个被包含的文件将被插入到JSP文件中去。所包含的文件可以是JSP文件、HTML文件、文本文件、甚至一段Java代码。但是在所包含的文件中不能使用“&lt; html &gt; &lt; /html &gt;”，“ &lt; body &gt; &lt; /body &gt;”标记，因为这将会影响到原有的JSP文件中所使用的相同标记。如果所包含的是一个JSP文件，则该文件将会执行。 include操作 功能：在JSP文件中包含一个静态或动态文件。 语法：&lt; jsp:include page=“relativeURL | &lt;%= expression%&gt;” /&gt; 属性说明：page=“relativeURL | &lt;%= expression %&gt;” ： 属性值指明所包含文件的相对路径，或者由expression所代表的相对路径的表达式。 注意：&lt; jsp:include &gt;动作标签可以包含静态文件或者动态文件。但二者有很大的不同。若包含静态文件，被包含文件的内容将直接嵌入到JSP文件中存放&lt; jsp:include &gt;指令的位置，而且当静态文件改变时，必须将JSP文件重新保存（重新转译），然后才能访问到变化了的文件。如果包含的文件是动态文件，那么将把动态执行的结果传回包含它的JSP页面中。若动态文件被修改，则重新运行JSP文件就会同步发生变化。而且书写该标签时，“jsp”、“：”以及“include”三者之间不要留有空格，否则会出错。 服务器跳转与客户端跳转的区别 JSP开发环境搭载步骤 具体戳 模块1第一章引论 - 1.5开发环境搭建 1、安装JDK 添加环境变量。 2、安装Tomcat在IE中输入 http://127.0.0.1:8080 或 http://本机ip:8080 或 http://localhost:8080 。检验是否启动成功出现猫，若此时浏览器中显示Tomcat的欢迎和管理画面，即表示服务器安装和启动成功。 3、安装MySQL。 4、安装Eclipse，设置Eclipse中的jdk和tomcat环境。 ** 5、关于Tomcat服务器虚拟目录的配置打开Tomcat的安装目录，进入conf/server.xml，在&lt; /host &gt;上方加入&lt; Context path=&quot;/虚拟目录名&quot; docBase=“虚拟目录路径”/&gt;。** JSP 内置对象的作用范围 request 将属性保存在一次请求范围内，前提是必须使用服务器跳转&lt; jsp:forward &gt; session session对象在第一个jsp页面被装载时自动创建，完成会话期管理。当用户第一次登录网站时，服务器端的JSP引擎将为该用户生成一个独一无二的session对象，用以记录该用户的个人信息。一旦该用户退出网站，那么属于他的session对象将会被注销。session对象可以绑定若干个人信息或者Java对象。如果不同session对象内部定义了相同的变量名，那么这些同名变量是不会相互干扰的。需要说明的是，session对象中所保存和检索的信息不能是基本数据类型，必须是Java语言中相应的Object对象。 application application对象与session对象相似，当一个用户首次访问服务器上的一个JSP页面时，服务器的JSP引擎就为该用户创建了application对象，当客户在服务器的各个页面之间浏览时，这个application对象都是同一个，直到服务器关闭。但是与session对象不同的是，所有用户的application对象都是同一个，即所有用户共享这个application对象。application对象由服务器创建，也由服务器自动清除，不能被用户创建和清除。下面介绍application对象中的方法。 param操作 功能：为其他标签提供附加信息。 语法：&lt;jsp:param name=”参数名字” value=”参数的值”/&gt; 注意：该标签必须配合&lt; jsp:include &gt;、&lt; jsp:forward &gt;、~~&lt; jsp:plugin &gt;~~动作标签一起使用。当与&lt; jsp: include &gt;标签一起使用时，可以将param组件中的参数值传递到include指令要包含的文件中去。 JDBC 应用程序接口 书本P113 java.sql.DriverManager：处理驱动的调入并且对产生新的数据库连接提供支持。 java.sql.Connection：代表对特定数据库的连接。 java.sql.Statement：代表一个特定的容器，对一个特定的数据库执行SQL语句。 java.sql.ResultSet：控制对一个特定语句的行数据的存储。 课件模块3第7章 DriverManager类：依据数据库的不同，管理JDBC驱动。 Connection接口：负责连接数据库并担任传送数据的任务。 Statement接口：由Connection产生，负责执行SQL语句。 ResultSet接口：负责保存Statement执行后所产生的查询结果。 ---------补充内容--------- **在JSP中如果要应用JSP提供的JavaBean的标签操作简单类，则此类必须满足如下的开发要求： ** 所有的类必须放在一个包中，在Web中没有包的类是不存在的。 所有的类必须声明为public class，才能被外部所访问。–&gt;类名称与文件名一致。 类中所有的属性必须封装，即使用private声明。 **封装的属性如果需要被外部所操作，则必须编写对应的setter、getter方法。 ** 一个JavaBean中至少存在一个无参数构造方法，此方法为JSP中的标签所使用。 注：如果在一个类中只包含了属性、setter、getter方法，那么这种类就称为简单JavaBean POJO（Plain Ordinary Java Object）简单Java对象 VO(Value Object)与简单Java对象对应，专门用于传递值的操作上。 TO(Transfers Object)传输对象 Servlet可以用来提交表单。 第一次访问比第二次访问慢，因为需要编译。 如何控制年龄的范围（1-150）？——在客户端进行控制。]]></content>
      <categories>
        <category>复习总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Web 编程技术]]></title>
    <url>%2F2018%2F06%2F17%2FJava%20Web%20%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[Java Web 编程技术 基础知识笔记 一、jsp技术 1. JSP基本语法 1.1. JSP Scriptlets 语法格式：&lt;% java 代码（变量、方法、表达式等）%&gt; 注意点： 可以进行属性的定义，也可以输出内容，==但不可以进行方法的定义==。 1.2. JSP 声明语句 语法格式：&lt;@! 定义的变量或方法等 %&gt; 注意点： 可以进行属性的定义，以及方法的定义，==但不可以进出输出内容==。 1.3. JSP表达式 语法格式：&lt;%= expression %&gt; 注意点： &lt;%= 和 %&gt; 标记之间插入的是表达式，不能插入语句 表达式或变量后面不能有分号 1.4. JSP注释 语法格式：HTML注释：&lt;!-- 注释信息 --&gt;，JSP注释：&lt;%-- 注释信息 --&gt; 注意点： HTML注释可通过浏览器查询源代码看到，JSP注释则不会。 2. JSP指令 2.1 . page指令 对页面的某些特性进行描述 语法格式：&lt;%@ page 属性名1=&quot;&quot;... %&gt; 常见属性：language、import、session、isErrorPage、errorPage、contentType、pageEnCoding 注意点： 除了import 属性以外，其他属性均只能出现一次 page 指令的属性名称区分大小写 page指令对整个页面有效，与其书写位置无关，一般写与最前面。 2.2 . include指令 JSP页面静态包含一个文件 语法格式：&lt;%@ include file=&quot;被包含的文件地址&quot; %&gt; 注意点： include 指令只有 file 一个属性。 插入文件的路径一般使用相对路径。 引入的文件必须遵循 JSP 语法，内容可包含静态HTML、JSP页面所具有的一切内容。 3. JSP 隐式对象 为了便于一些对象的重复使用，JSP 提供9个隐式（内置）对象，可直接在 JSP 页面中使用 3.1 . out对象 用于页面输出 语法格式：out.println(&quot;...&quot;); 注意点： 通过out隐式对象写入数据相当于将数据插入到 JspWriter 对象的缓冲区中，只有调用了 ServletResponse.getWriter() 方法，缓冲区中的数据才能真正的写入到Servlet 引擎所提供的缓冲区。 如需立即写入缓冲区，可通过 page 指令 将 buffer 属性设为0kb​]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础知识]]></title>
    <url>%2F2018%2F06%2F16%2FHTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[基础知识 浏览器访问网页原理 当我们利用浏览器访问网页时，其实是有真实的物理文件传输，浏览器会先将网页上的内容缓存到本地文件夹中，然后再渲染出来呈现给用户看。 平时我们在上网时会发现第二次访问比第一次访问快，这是因为第一次访问已经将这个网页上的内容缓存到了本地。 浏览器请求数据过程 12用户端--&gt;服务器: 发送“请求报文”服务器--&gt;用户端: 发送“响应报文” 请求报文 请求行+请求头+空行+请求体 响应报文 响应行+响应头+响应体 URL 我们在浏览器的地址中输入的这个地址就是一个URL。 URL格式 http://127.0.0.1/index.html http://127.0.0.1:80/index.html(完整格式) URL拆分 URL协议类型：http:// 服务器地址：127.0.0.1 服务器端口号： :80 访问的资源名称：index.html 各部分作用 IP地址和端口号 IP地址相当于现实生活中的地址，例如：福建省莆田市仙游县 端口号相当于我们现实生活中的的门牌号码，例如：9栋909室 index.html作用 当我们通过IP地址和端口号寻找到对应的服务器之后，需要通过资源名称告诉服务器，我们要获取服务器上的哪个资源。 HTTP协议 HTTP：超文本传输协议 协议 在现实生活中有很多协议，例如租房协议，无论什么协议，他们都是用来规范约束某一类事物 HTTP协议是规范约束浏览器和服务器之间如何沟通。 认识HTML HTML作用 HTML只有一个作用，就是专门用于描述文本语义的，也就是说我们可以利用HTML来告诉浏览器哪些是标题，哪些是段落 这些用于描述其他文本语义的文本，我们称之为标签，并且这些用于描述其他文本语义的标签在浏览器中不会被显示出来 HTML的整体框架 1234567&lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; &lt;&gt;:开始标签 &lt;/&gt;:结束标签 &lt;html&gt;标签 作用：用于告诉浏览器这是一个网页，也就是说告诉浏览器我是一个HTML文档。 注意点：其他所有标签都必须写在html标签里面，也就是写在html开始标签与结束标签里面。 &lt;head&gt;标签 作用 用于给网站添加一些配置信息 例如 指定网站的标题/指定网站小图片 添加网站的SEO相关的信息（指定网站的关键字/指定网站的描述信息） 外挂一些外部的CSS/JS文件 添加一些浏览器适配的的相关内容 注意点 一般情况下，写在head标签里的内容不会显示给用户看。 &lt;title&gt;标签 作用 专门用于指定网站的标题，并且这个指定的标题将来还会作为用户保存网站的默认标题 注意点 title标签必须写在head标签里 &lt;body&gt;标签 作用 专门用于定义HTML文件中能显示给用户查看的内容(文字/图片/音频/视频) 注意点 在其他地方写有时也可以看到，但最好不要这样做 一对html标签中，只能有一对body标签。 head内部标签 meta标签 作用：指定当前网页的字符集 为什么会有乱码现象？ 就是因为我们在编写网页时没有指定字符集 如何解决乱码现象？ 在head标签中添加&lt;meta charset=&quot;GBK&quot; /&gt; GBK/GB2312和UTF-8区别 GBK/GB2312里面存储的字符比较少，仅仅存储了汉字和一些常用外文，体积比较小 UTF-8里面存储世界上所有的文字，体积比较大。 注意点 在HTML文件中指定的字符集必须和保存这个文件的字符集一致，否则还是会出现乱码。 标签的分类 单标签 只有开始标签没有结束标签，也就是由一个&lt;&gt;组成的 双标签 有开始标签和结束标签，也就是由一个&lt;&gt;和一个&lt;/&gt;组成的 DTD文档声明 由来：由于HTML有很多版本的规范，为了让浏览器能正确的渲染我们的网页，我们需要在HTML第一行告诉浏览器HTML文档使用哪个规范 HTML5文档声明规范(向下兼容) 123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 注意点 任何一个标准的HTML网页，第一行一定是DTD文档声明 DTD文档声明不区分大小写 &lt;!DOCTYPE html&gt; &lt;!doctype html&gt; DTD文档声明不是一个标签 浏览器并不完全依赖于DTD文档，它有自己的一套机制。 没有DTD文档声明的网页也可以正常运行，但为了遵守规定以及减少一些不必要的麻烦，也要在第一行加上声明。 .htm和 .html扩展名区别 DOS操作系统(win95/win98)下只支持长度为3位的扩展名，所以是htm 后续Windos系统中可以大于3位，所以可使用html。 htm是为了兼容过去的DOS操作系统 基础标签 H标签 作用：用于给文本添加标题语义 格式：&lt;h1&gt;xxxxxx&lt;/h1&gt; 注意点 H标签是用来给文本添加标题语义的，而不是用来修改文本的样式的 H标签一共有6个，从H1~H6，超过6个无效。 123456&lt;h1&gt;h1&lt;/h1&gt;&lt;h2&gt;h2&lt;/h2&gt;&lt;h3&gt;h3&lt;/h3&gt;&lt;h4&gt;h4&lt;/h4&gt;&lt;h5&gt;h5&lt;/h5&gt;&lt;h6&gt;h6&lt;/h6&gt; 被H系列标签包裹的内容会独占一行，H1最大，H6最小 在企业开发中，一定要慎用H系列的标签，特别是H1标签，一般一个界面只能出现一个H1标签（和SEO有关） P标签 作用：告诉浏览器哪些文字是一个段落 格式：&lt;p&gt;一个段落&lt;/p&gt; 注意点 在浏览器中单独占一行 Hr标签 作用：在浏览器上显示一条分割线 格式：&lt;hr /&gt; 注意点 在浏览器中独占一行 &lt;hr&gt;或&lt;hr /&gt;均可，前者为HTML规范，后者为XHTML规范 在HTML5中，写不写/均可 注释 作用：让程序具有可读性 格式：&lt;!--被注释的内容--&gt; 注意点： 被注释的内容不会再浏览器中显示 img标签 作用：告诉浏览器我们需要显示一张图片 格式：img src=&quot;&quot; src是英文source的缩写，用来告诉img标签需要显示的图片名称 1&lt;img src="img.jpg"&gt; 注意点 和H系列标签/P标签/Hr标签不一样，img标签不会独占一行 width：宽度 height：高度 用来设置显示图片的宽高 如果没有指定，则会按照默认的宽高显示 如果只指定一个，则另一个等比进行缩放 title：当鼠标悬停在图片上时，弹出的描述框 alt：altermate(交换/替换)的缩写，当图片找不到时显示的内容 1&lt;img src="img.jpg" width="100" height="100" title="图片内容" alt="图片消失了"&gt; 路径问题 给src属性赋值有两种方式 相对路径赋值 每次从.html文件所在的文件夹开始查找 同级：图片与.html文件存储在同一个文件夹 格式：src=&quot;img.jpg&quot; 含义：在html文件所在的文件夹中查找名称叫做img.jpg的图片 下级：存储图片的文件夹和.html文件在同一个文件夹 格式：src=&quot;image/img.jpg&quot; 含义：在html文件所在的文件夹中查找image文件夹，在image文件夹里查找img.jpg的图片 上级：存储图片的位置和存储代码的文件夹在同一个文件夹里 格式：src=&quot;../img.jpg&quot; 含义：在.html文件所在的文件夹中找到这个文件夹的上一级文件夹，然后再上一级文件夹中找到img.jpg的图片，其中../代表从当前位置找到上一级文件夹 绝对路径赋值（了解） 每次从指定的盘符开始查找 格式：src=&quot;C:\Users\img.jpg&quot; 含义：在C盘下找到Users文件夹，在Users文件夹下找到img.jpg。 注意点 路径中不要出现中文字符，否则可能出现未知问题 如果通过相对路径来指定，那么不能跨盘符 在企业开发中如果需要编写路径，统一使用反斜杠/，不要用正斜杠，因为将来在我们开发的程序可能会部署到其他操作系统的服务器上，在其他操作系统中路径都是/ 。 在企业开发中，一般情况下不使用绝对路径，因为可移植性差。 br标签 作用：换行 格式：&lt;br&gt; 注意点 多个br标签可以连续使用，使用多少个br标签就会换多少行 由于HTML的作用是用来给文本添加语义的，br标签的语义是不另起一个段落换行，也就是在段落内换行，而在企业开发中一般情况下需要换行都是因为需要另起一个段落，所以在企业开发中很少使用br标签。 换行还可以使用&lt;p&gt;&lt;/p&gt; a标签 作用：控制页面与页面之间的跳转 格式：&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt;需要展现给用户看的内容&lt;/a&gt; 属性 target：专门用于控制如何跳转 _self：在当前选项卡中跳转，默认为_self。 _blank：在新的选项卡中跳转，也就是新建页面跳转。 title：鼠标悬停时显示的提示文本 注意点 a标签不仅可以让文字可以点击，也可以让图片，例如&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt; &lt;img src=&quot; &quot;&gt; &lt;/a&gt; 一个a标签必须有一个href属性，否则a标签不知道要跳转到什么界面 如果通过a标签的href属性指定一个URL地址，那么必须在地址前面加上http://或https://。 a标签的href属性既可以指定网页地址，也可以指定本地地址。 拓展 假链接 作用：点击后不会跳转 意义：在企业开发前期，其他页面还没有写出来，那么我们不知道要跳转到什么地方，所以使用假链接来代替。 格式：#与javascript 区别：#的假链接会自动返回网页的顶部，javascript则不会。 制作返回顶部的功能，可以使用# 。 锚点 作用：在当前页面跳转 格式：&lt;a href=&quot;#id名称&quot;跳转的地方&gt;&lt;/a&gt; ​ &lt;h2 id=&quot;名称&quot;地方&gt;&lt;/h2&gt; 注意点 没有过渡动画，立即跳转。 a标签除了可以跳转到当前界面的指定位置，也可以跳转到其他界面的指定位置。 123456789&lt;a href="https://www.baidu.com/" target="_blank" title="百度"&gt;百度一下&lt;/a&gt;&lt;a href="#"&gt;返回顶部&lt;/a&gt;&lt;a href="javascript"&gt;原地不动&lt;/a&gt;&lt;a href="#center"&gt;跳转到中部&lt;/a&gt;&lt;h2 id="center"&gt;我是中部&lt;/h2&gt;&lt;a href="锚点测试.html#ceshi"&gt;跳转到锚点测试界面的指定位置&lt;/a&gt; bace标签 作用：专门用于统一制定当前网页中所有的超链接(a标签)需要如何跳转 注意点 base标签必须写在head标签的开始标签和结束标签之间 如果同时在 base 标签与 a 标签中制定了 target ，那么浏览器会优先按照 a 标签中的来执行 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;bace标签&lt;/title&gt; &lt;base target="_blank"&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 列表标签 无序列表（unordered list） 作用：给一堆数据添加列表语义，所有数据没有先后之分。 格式： 123456&lt;ul&gt; &lt;li&gt;需要显示的条目内容&lt;/li&gt;&lt;/ul&gt;&lt;!-- li是英文list(列表) item(条目)的缩写--&gt; 注意点 ul 标签是用来添加语义的，而不是添加小圆圈。 ul 标签和 li 标签是一个整体（组合），一般成对出现，不会单个出现。 由于是一个组合，所以 ul 标签中不推荐包含其他标签（ li 标签里可以放其他标签）。 应用场景：新闻列表、商品列表、导航条]]></content>
      <categories>
        <category>编程知识</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>初始页面</category>
      </categories>
  </entry>
</search>
